[
  {
    "kind": "ClassDeclaration",
    "module": "component",
    "name": "PushPipe",
    "overloads": [
      {
        "file": "modules/component/src/push/push.pipe.ts#L56-L93",
        "info": [
          ["Pipe", { "__kind": "heading", "description": "PushPipe\n" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nThe `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\nIt contains intelligent handling of change detection to enable us\nrunning in zone-full as well as zone-less mode without any changes to the code.\n\nThe current way of binding an observable to the view looks like that:\n```html\n{{observable$ | async}}\n<ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n<component [value]=\"observable$ | async\"></component>\n```\n\nThe problem is `async` pipe just marks the component and all its ancestors as dirty.\nIt needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render_creator all dirty marked\ncomponents.\n\nHeavy dynamic and interactive UIs suffer from zones change detection a lot and can\nlean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n\n`ngrxPush` pipe solves that problem.\n\nIncluded Features:\n- Take observables or promises, retrieve their values and render_creator the value to the template\n- Handling null and undefined values in a clean unified/structured way\n- Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n- Distinct same values in a row to increase performance\n- Coalescing of change detection calls to boost performance\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n`ngrxPush` pipe solves that problem. It can be used like shown here:\n```html\n{{observable$ | ngrxPush}}\n<ng-container *ngIf=\"observable$ | ngrxPush as o\">{{o}}</ng-container>\n<component [value]=\"observable$ | ngrxPush\"></component>\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "modules/component/src/push/push.pipe.ts#L83-L88",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "potentialObservable",
                      "description": "",
                      "type": "ObservableInput<T>"
                    }
                  ]
                ],
                "signature": "transform<T>(  potentialObservable: ObservableInput<T> | null | undefined ): T | null | undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "modules/component/src/push/push.pipe.ts#L80-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "potentialObservable",
                      "description": "",
                      "type": "null"
                    }
                  ]
                ],
                "signature": "transform<T>(potentialObservable: null): null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "modules/component/src/push/push.pipe.ts#L81-L81",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "potentialObservable",
                      "description": "",
                      "type": "undefined"
                    }
                  ]
                ],
                "signature": "transform<T>(potentialObservable: undefined): undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "modules/component/src/push/push.pipe.ts#L82-L82",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "potentialObservable",
                      "description": "",
                      "type": "ObservableInput<T>"
                    }
                  ]
                ],
                "signature": "transform<T>(potentialObservable: ObservableInput<T>): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/component/src/push/push.pipe.ts#L90-L92",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class PushPipe<S> implements PipeTransform, OnDestroy {\n  transform<T>(\n    potentialObservable: ObservableInput<T> | null | undefined\n  ): T | null | undefined;\n  transform<T>(potentialObservable: null): null;\n  transform<T>(potentialObservable: undefined): undefined;\n  transform<T>(potentialObservable: ObservableInput<T>): T;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "component",
    "name": "LetDirective",
    "overloads": [
      {
        "file": "modules/component/src/let/let.directive.ts#L93-L180",
        "info": [
          [
            "Directive",
            { "__kind": "heading", "description": "LetDirective\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nThe `*ngrxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\nIt also helps with several internal processing under the hood.\n\nThe current way of binding an observable to the view looks like that:\n```html\n<ng-container *ngIf=\"observableNumber$ as n\">\n<app-number [number]=\"n\">\n</app-number>\n<app-number-special [number]=\"n\">\n</app-number-special>\n</ng-container>\n```\n\nThe problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\n\nIncluded Features:\n- binding is always present. (`*ngIf=\"truthy$\"`)\n- it takes away the multiple usages of the `async` or `ngrxPush` pipe\n- a unified/structured way of handling null and undefined\n- triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or `ChangeDetectorRef.markForCheck`)\n- triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or `ÉµdetectChanges`)\n- distinct same values in a row (distinctUntilChanged operator),\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe `*ngrxLet` directive take over several things and makes it more convenient and save to work with streams in the template\n`<ng-container *ngrxLet=\"observableNumber$ as c\"></ng-container>`\n\n```html\n<ng-container *ngrxLet=\"observableNumber$ as n\">\n<app-number [number]=\"n\">\n</app-number>\n</ng-container>\n\n<ng-container *ngrxLet=\"observableNumber$; let n\">\n<app-number [number]=\"n\">\n</app-number>\n</ng-container>\n```\n\nIn addition to that it provides us information from the whole observable context.\nWe can track the observables:\n- next value\n- error value\n- complete state\n\n```html\n<ng-container *ngrxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\n<app-number [number]=\"n\"  *ngIf=\"!e && !c\">\n</app-number>\n<ng-container *ngIf=\"e\">\nThere is an error: {{e}}\n</ng-container>\n<ng-container *ngIf=\"c\">\nObservable completed: {{c}}\n</ng-container>\n</ng-container>\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngTemplateContextGuard",
              "info": {
                "file": "modules/component/src/let/let.directive.ts#L141-L146",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "",
                      "type": "LetDirective<U>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "unknown"
                    }
                  ]
                ],
                "signature": "static ngTemplateContextGuard<U>(  dir: LetDirective<U>,  ctx: unknown | null | undefined ): ctx is LetViewContext<U>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createEmbeddedView",
              "info": {
                "file": "modules/component/src/let/let.directive.ts#L169-L174",
                "info": [],
                "signature": "createEmbeddedView();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/component/src/let/let.directive.ts#L176-L179",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngTemplateGuard_ngrxLet",
              "type": "\"binding\"",
              "description": ""
            }
          ]
        ],
        "signature": "class LetDirective<U> implements OnDestroy {\n  static ngTemplateGuard_ngrxLet: 'binding';\n\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown | null | undefined\n  ): ctx is LetViewContext<U>;\n  createEmbeddedView();\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "component",
    "name": "ReactiveComponentModule",
    "overloads": [
      {
        "file": "modules/component/src/reactive-component.module.ts#L9-L13",
        "info": [],
        "signature": "class ReactiveComponentModule {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "component-store",
    "name": "SelectConfig",
    "overloads": [
      {
        "file": "modules/component-store/src/component-store.ts#L31-L33",
        "signature": "interface SelectConfig {\n  debounce?: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "component-store",
    "name": "initialStateToken",
    "overloads": [
      {
        "file": "modules/component-store/src/component-store.ts#L35-L35",
        "signature": "const initialStateToken: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "component-store",
    "name": "ComponentStore",
    "overloads": [
      {
        "file": "modules/component-store/src/component-store.ts#L37-L275",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L60-L63",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updater",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L80-L122",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an updater.\n\nThrows an error if updater is called with synchronous values (either\nimperative value or Observable that is synchronous) before ComponentStore\nis initialized. If called with async Observable before initialization then\nstate will not be updated and subscription would be closed.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "updaterFn",
                      "description": "A static updater function that takes 2 parameters (the",
                      "type": "(state: T, value: V) => T"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "A function that accepts one argument which is forwarded as the\nsecond argument to `updaterFn`. Every time this function is called\nsubscribers will be notified of the state change.\n"
                    }
                  ]
                ],
                "signature": "updater<V>(  updaterFn: (state: T, value: V) => T ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setState",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L140-L146",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the state specific value."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stateOrUpdaterFn",
                      "description": "object of the same type as the state or an",
                      "type": "T | ((state: T) => T)"
                    }
                  ]
                ],
                "signature": "setState(stateOrUpdaterFn: T | ((state: T) => T)): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L200-L230",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "args",
                      "description": "",
                      "type": "O"
                    }
                  ]
                ],
                "signature": "select<  O extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,  R,  ProjectorFn = (...a: unknown[]) => R >(...args: O): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L173-L173",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a selector.\n\nThis supports combining up to 4 selectors. More could be added as needed.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projector",
                      "description": "A pure projection function that takes the current state and",
                      "type": "(s: T) => R"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "SelectConfig that changes the behavior of selector, including",
                      "type": "SelectConfig"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "An observable of the projector results.\n"
                    }
                  ]
                ],
                "signature": "select<R>(projector: (s: T) => R, config?: SelectConfig): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L174-L178",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s1",
                      "description": "",
                      "type": "Observable<S1>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projector",
                      "description": "",
                      "type": "(s1: S1) => R"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "SelectConfig"
                    }
                  ]
                ],
                "signature": "select<R, S1>(  s1: Observable<S1>,  projector: (s1: S1) => R,  config?: SelectConfig ): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L179-L184",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s1",
                      "description": "",
                      "type": "Observable<S1>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s2",
                      "description": "",
                      "type": "Observable<S2>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projector",
                      "description": "",
                      "type": "(s1: S1, s2: S2) => R"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "SelectConfig"
                    }
                  ]
                ],
                "signature": "select<R, S1, S2>(  s1: Observable<S1>,  s2: Observable<S2>,  projector: (s1: S1, s2: S2) => R,  config?: SelectConfig ): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L185-L191",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s1",
                      "description": "",
                      "type": "Observable<S1>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s2",
                      "description": "",
                      "type": "Observable<S2>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s3",
                      "description": "",
                      "type": "Observable<S3>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projector",
                      "description": "",
                      "type": "(s1: S1, s2: S2, s3: S3) => R"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "SelectConfig"
                    }
                  ]
                ],
                "signature": "select<R, S1, S2, S3>(  s1: Observable<S1>,  s2: Observable<S2>,  s3: Observable<S3>,  projector: (s1: S1, s2: S2, s3: S3) => R,  config?: SelectConfig ): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L192-L199",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s1",
                      "description": "",
                      "type": "Observable<S1>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s2",
                      "description": "",
                      "type": "Observable<S2>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s3",
                      "description": "",
                      "type": "Observable<S3>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "s4",
                      "description": "",
                      "type": "Observable<S4>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projector",
                      "description": "",
                      "type": "(s1: S1, s2: S2, s3: S3, s4: S4) => R"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "SelectConfig"
                    }
                  ]
                ],
                "signature": "select<R, S1, S2, S3, S4>(  s1: Observable<S1>,  s2: Observable<S2>,  s3: Observable<S3>,  s4: Observable<S4>,  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R,  config?: SelectConfig ): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "effect",
              "info": {
                "file": "modules/component-store/src/component-store.ts#L241-L274",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an effect.\n\nThis effect is subscribed to for the life of the @Component."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "generator",
                      "description": "A function that takes an origin Observable input and",
                      "type": "(origin$: OriginType) => Observable<unknown>"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "A function that, when called, will trigger the origin Observable.\n"
                    }
                  ]
                ],
                "signature": "effect<  ProvidedType = void,  OriginType extends Observable<ProvidedType> | unknown = Observable<   ProvidedType  >,  ObservableType = OriginType extends Observable<infer A> ? A : never,  ReturnType = ProvidedType | ObservableType extends void   ? () => void   : (     observableOrValue: ObservableType | Observable<ObservableType>    ) => Subscription >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "destroy$",
              "type": "Observable<void>",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state$",
              "type": "Observable<T>",
              "description": ""
            }
          ]
        ],
        "signature": "class ComponentStore<T extends object> implements OnDestroy {\n  readonly destroy$ = this.destroySubject$.asObservable();\n  readonly state$: Observable<T> = this.select((s) => s);\n\n  ngOnDestroy();\n  updater<V>(\n    updaterFn: (state: T, value: V) => T\n  ): unknown extends V ? () => void : (t: V | Observable<V>) => Subscription;\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void;\n  select<\n    O extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,\n    R,\n    ProjectorFn = (...a: unknown[]) => R\n  >(...args: O): Observable<R>;\n  select<R>(projector: (s: T) => R, config?: SelectConfig): Observable<R>;\n  select<R, S1>(\n    s1: Observable<S1>,\n    projector: (s1: S1) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    projector: (s1: S1, s2: S2) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2, S3>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    projector: (s1: S1, s2: S2, s3: S3) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  select<R, S1, S2, S3, S4>(\n    s1: Observable<S1>,\n    s2: Observable<S2>,\n    s3: Observable<S3>,\n    s4: Observable<S4>,\n    projector: (s1: S1, s2: S2, s3: S3, s4: S4) => R,\n    config?: SelectConfig\n  ): Observable<R>;\n  effect<\n    ProvidedType = void,\n    OriginType extends Observable<ProvidedType> | unknown = Observable<\n      ProvidedType\n    >,\n    ObservableType = OriginType extends Observable<infer A> ? A : never,\n    ReturnType = ProvidedType | ObservableType extends void\n      ? () => void\n      : (\n          observableOrValue: ObservableType | Observable<ObservableType>\n        ) => Subscription\n  >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityActionFactory",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action-factory.ts#L9-L85",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/actions/entity-action-factory.ts#L34-L50",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "nameOrPayload",
                      "description": "",
                      "type": "string | EntityActionPayload<P>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOp",
                      "description": "",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "create<P = any>(  nameOrPayload: EntityActionPayload<P> | string,  entityOp?: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/actions/entity-action-factory.ts#L19-L24",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an EntityAction to perform an operation (op) for a particular entity type\n(entityName) with optional data and other optional flags"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "Name of the entity type",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOp",
                      "description": "Operation to perform (EntityOp)",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[data]",
                      "description": "data for the operation",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "additional options",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "create<P = any>(  entityName: string,  entityOp: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/actions/entity-action-factory.ts#L31-L31",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an EntityAction to perform an operation (op) for a particular entity type\n(entityName) with optional data and other optional flags"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "payload",
                      "description": "Defines the EntityAction and its options",
                      "type": "EntityActionPayload<P>"
                    }
                  ]
                ],
                "signature": "create<P = any>(payload: EntityActionPayload<P>): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createFromAction",
              "info": {
                "file": "modules/data/src/actions/entity-action-factory.ts#L74-L79",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an EntityAction from another EntityAction, replacing properties with those from newPayload;"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "from",
                      "description": "Source action that is the base for the new action",
                      "type": "EntityAction<any>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newProperties",
                      "description": "New EntityAction properties that replace the source action properties",
                      "type": "Partial<EntityActionPayload<P>>"
                    }
                  ]
                ],
                "signature": "createFromAction<P = any>(  from: EntityAction,  newProperties: Partial<EntityActionPayload<P>> ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "formatActionType",
              "info": {
                "file": "modules/data/src/actions/entity-action-factory.ts#L81-L84",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "formatActionType(op: string, tag: string);"
              }
            }
          ]
        ],
        "signature": "class EntityActionFactory {\n  create<P = any>(\n    nameOrPayload: EntityActionPayload<P> | string,\n    entityOp?: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  create<P = any>(\n    entityName: string,\n    entityOp: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  create<P = any>(payload: EntityActionPayload<P>): EntityAction<P>;\n  createFromAction<P = any>(\n    from: EntityAction,\n    newProperties: Partial<EntityActionPayload<P>>\n  ): EntityAction<P>;\n  formatActionType(op: string, tag: string);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityActionGuard",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action-guard.ts#L11-L156",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Guard methods that ensure EntityAction payload is as expected.\nEach method returns that payload if it passes the guard or\nthrows an error.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeEntity",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L15-L25",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<T>"
                    }
                  ]
                ],
                "signature": "mustBeEntity(action: EntityAction<T>): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeEntities",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L28-L41",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<T[]>"
                    }
                  ]
                ],
                "signature": "mustBeEntities(action: EntityAction<T[]>): T[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeKey",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L44-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<string | number>"
                    }
                  ]
                ],
                "signature": "mustBeKey(action: EntityAction<string | number>): string | number | never;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeKeys",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L56-L70",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<(string | number)[]>"
                    }
                  ]
                ],
                "signature": "mustBeKeys(action: EntityAction<(string | number)[]>): (string | number)[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeUpdate",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L73-L84",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "mustBeUpdate(action: EntityAction<Update<T>>): Update<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeUpdates",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L87-L103",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<any[]>"
                    }
                  ]
                ],
                "signature": "mustBeUpdates(action: EntityAction<Update<T>[]>): Update<T>[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeUpdateResponse",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L106-L119",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<UpdateResponseData<T>>"
                    }
                  ]
                ],
                "signature": "mustBeUpdateResponse(  action: EntityAction<UpdateResponseData<T>> ): UpdateResponseData<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mustBeUpdateResponses",
              "info": {
                "file": "modules/data/src/actions/entity-action-guard.ts#L122-L140",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "EntityAction<UpdateResponseData<T>[]>"
                    }
                  ]
                ],
                "signature": "mustBeUpdateResponses(  action: EntityAction<UpdateResponseData<T>[]> ): UpdateResponseData<T>[];"
              }
            }
          ]
        ],
        "signature": "class EntityActionGuard<T> {\n  mustBeEntity(action: EntityAction<T>): T;\n  mustBeEntities(action: EntityAction<T[]>): T[];\n  mustBeKey(action: EntityAction<string | number>): string | number | never;\n  mustBeKeys(action: EntityAction<(string | number)[]>): (string | number)[];\n  mustBeUpdate(action: EntityAction<Update<T>>): Update<T>;\n  mustBeUpdates(action: EntityAction<Update<T>[]>): Update<T>[];\n  mustBeUpdateResponse(\n    action: EntityAction<UpdateResponseData<T>>\n  ): UpdateResponseData<T>;\n  mustBeUpdateResponses(\n    action: EntityAction<UpdateResponseData<T>[]>\n  ): UpdateResponseData<T>[];\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "ofEntityOp",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L25-L47",
        "signature": "function ofEntityOp<T extends EntityAction>(\n  ...allowedEntityOps: any[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedEntityOps",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L19-L21",
        "signature": "function ofEntityOp<T extends EntityAction>(\n  allowedOps: string[] | EntityOp[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Select actions concerning one of the allowed Entity operations"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedEntityOps",
              "description": "Entity operations (e.g, EntityOp.QUERY_ALL) whose actions should be selected",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedOps",
              "description": "",
              "type": "string[] | EntityOp[]"
            }
          ]
        ]
      },
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L22-L24",
        "signature": "function ofEntityOp<T extends EntityAction>(\n  ...allowedOps: (string | EntityOp)[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedOps",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "ofEntityType",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L67-L89",
        "signature": "function ofEntityType<T extends EntityAction>(\n  ...allowedEntityNames: any[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedEntityNames",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L61-L63",
        "signature": "function ofEntityType<T extends EntityAction>(\n  allowedEntityNames?: string[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Select actions concerning one of the allowed Entity types"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedEntityNames",
              "description": "Entity-type names (e.g, 'Hero') whose actions should be selected",
              "type": "string[]"
            }
          ]
        ]
      },
      {
        "file": "modules/data/src/actions/entity-action-operators.ts#L64-L66",
        "signature": "function ofEntityType<T extends EntityAction>(\n  ...allowedEntityNames: string[]\n): OperatorFunction<EntityAction, T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedEntityNames",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityAction",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action.ts#L7-L10",
        "signature": "interface EntityAction<P = any> {\n  readonly type: string;\n  readonly payload: EntityActionPayload<P>;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityActionOptions",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action.ts#L13-L37",
        "signature": "interface EntityActionOptions {\n  readonly correlationId?: any;\n  readonly isOptimistic?: boolean;\n  readonly mergeStrategy?: MergeStrategy;\n  readonly tag?: string;\n  error?: Error;\n  skip?: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityActionPayload",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-action.ts#L40-L44",
        "signature": "interface EntityActionPayload<P = any> {\n  readonly entityName: string;\n  readonly entityOp: EntityOp;\n  readonly data?: P;\n\n  // inherited from EntityActionOptions\n  readonly correlationId?: any;\n  readonly isOptimistic?: boolean;\n  readonly mergeStrategy?: MergeStrategy;\n  readonly tag?: string;\n  error?: Error;\n  skip?: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "data",
    "name": "EntityCacheAction",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L14-L25",
        "signature": "export enum EntityCacheAction {\n  CLEAR_COLLECTIONS = '@ngrx/data/entity-cache/clear-collections',\n  LOAD_COLLECTIONS = '@ngrx/data/entity-cache/load-collections',\n  MERGE_QUERY_SET = '@ngrx/data/entity-cache/merge-query-set',\n  SET_ENTITY_CACHE = '@ngrx/data/entity-cache/set-cache',\n\n  SAVE_ENTITIES = '@ngrx/data/entity-cache/save-entities',\n  SAVE_ENTITIES_CANCEL = '@ngrx/data/entity-cache/save-entities-cancel',\n  SAVE_ENTITIES_CANCELED = '@ngrx/data/entity-cache/save-entities-canceled',\n  SAVE_ENTITIES_ERROR = '@ngrx/data/entity-cache/save-entities-error',\n  SAVE_ENTITIES_SUCCESS = '@ngrx/data/entity-cache/save-entities-success',\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCacheQuerySet",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L32-L34",
        "signature": "interface EntityCacheQuerySet {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Hash of entities keyed by EntityCollection name,\ntypically the result of a query that returned results from a multi-collection query\nthat will be merged into an EntityCache via the `MergeQuerySet` action.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "ClearCollections",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L42-L49",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Clear the collections identified in the collectionSet."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[collections]",
              "description": "Array of names of the collections to clear.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[tag]",
              "description": "Optional tag to identify the operation from the app perspective.",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ collections?: string[]; tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.CLEAR_COLLECTIONS",
              "description": ""
            }
          ]
        ],
        "signature": "class ClearCollections implements Action {\n  readonly payload: { collections?: string[]; tag?: string };\n  readonly type = EntityCacheAction.CLEAR_COLLECTIONS;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "LoadCollections",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L58-L65",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create entity cache action that loads multiple entity collections at the same time.\nbefore any selectors$ observables emit."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "querySet",
              "description": "The collections to load, typically the result of a query.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[tag]",
              "description": "Optional tag to identify the operation from the app perspective.",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ collections: EntityCacheQuerySet; tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.LOAD_COLLECTIONS",
              "description": ""
            }
          ]
        ],
        "signature": "class LoadCollections implements Action {\n  readonly payload: { collections: EntityCacheQuerySet; tag?: string };\n  readonly type = EntityCacheAction.LOAD_COLLECTIONS;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "MergeQuerySet",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L78-L99",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create entity cache action that merges entities from a query result\nthat returned entities from multiple collections.\nCorresponding entity cache reducer should add and update all collections\nat the same time, before any selectors$ observables emit."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "querySet",
              "description": "The result of the query in the form of a map of entity collections.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "mergeStrategy",
              "description": "How to merge a queried entity when it is already in the collection.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[tag]",
              "description": "Optional tag to identify the operation from the app perspective.",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ querySet: EntityCacheQuerySet; mergeStrategy?: MergeStrategy; tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.MERGE_QUERY_SET",
              "description": ""
            }
          ]
        ],
        "signature": "class MergeQuerySet implements Action {\n  readonly payload: {\n    querySet: EntityCacheQuerySet;\n    mergeStrategy?: MergeStrategy;\n    tag?: string;\n  };\n  readonly type = EntityCacheAction.MERGE_QUERY_SET;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SetEntityCache",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L108-L115",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create entity cache action for replacing the entire entity cache.\nDangerous because brute force but useful as when re-hydrating an EntityCache\nfrom local browser storage when the application launches."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cache",
              "description": "New state of the entity cache",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[tag]",
              "description": "Optional tag to identify the operation from the app perspective.",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ cache: EntityCache; tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SET_ENTITY_CACHE",
              "description": ""
            }
          ]
        ],
        "signature": "class SetEntityCache implements Action {\n  readonly payload: { cache: EntityCache; tag?: string };\n  readonly type = EntityCacheAction.SET_ENTITY_CACHE;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SaveEntities",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L118-L142",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ readonly changeSet: ChangeSet; readonly url: string; readonly correlationId?: any; readonly isOptimistic?: boolean; readonly mergeStrategy?: MergeStrategy; readonly tag?: string; error?: Error; skip?: boolean; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SAVE_ENTITIES",
              "description": ""
            }
          ]
        ],
        "signature": "class SaveEntities implements Action {\n  readonly payload: {\n    readonly changeSet: ChangeSet;\n    readonly url: string;\n    readonly correlationId?: any;\n    readonly isOptimistic?: boolean;\n    readonly mergeStrategy?: MergeStrategy;\n    readonly tag?: string;\n    error?: Error;\n    skip?: boolean;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SaveEntitiesCancel",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L144-L161",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ readonly correlationId: any; readonly reason?: string; readonly entityNames?: string[]; readonly tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SAVE_ENTITIES_CANCEL",
              "description": ""
            }
          ]
        ],
        "signature": "class SaveEntitiesCancel implements Action {\n  readonly payload: {\n    readonly correlationId: any;\n    readonly reason?: string;\n    readonly entityNames?: string[];\n    readonly tag?: string;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_CANCEL;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SaveEntitiesCanceled",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L163-L174",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ readonly correlationId: any; readonly reason?: string; readonly tag?: string; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SAVE_ENTITIES_CANCEL",
              "description": ""
            }
          ]
        ],
        "signature": "class SaveEntitiesCanceled implements Action {\n  readonly payload: {\n    readonly correlationId: any;\n    readonly reason?: string;\n    readonly tag?: string;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_CANCEL;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SaveEntitiesError",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L176-L187",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ readonly error: DataServiceError; readonly originalAction: SaveEntities; readonly correlationId: any; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SAVE_ENTITIES_ERROR",
              "description": ""
            }
          ]
        ],
        "signature": "class SaveEntitiesError {\n  readonly payload: {\n    readonly error: DataServiceError;\n    readonly originalAction: SaveEntities;\n    readonly correlationId: any;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_ERROR;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "SaveEntitiesSuccess",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-action.ts#L189-L213",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "payload",
              "type": "{ readonly changeSet: ChangeSet; readonly url: string; readonly correlationId?: any; readonly isOptimistic?: boolean; readonly mergeStrategy?: MergeStrategy; readonly tag?: string; error?: Error; skip?: boolean; }",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "type": "EntityCacheAction.SAVE_ENTITIES_SUCCESS",
              "description": ""
            }
          ]
        ],
        "signature": "class SaveEntitiesSuccess implements Action {\n  readonly payload: {\n    readonly changeSet: ChangeSet;\n    readonly url: string;\n    readonly correlationId?: any;\n    readonly isOptimistic?: boolean;\n    readonly mergeStrategy?: MergeStrategy;\n    readonly tag?: string;\n    error?: Error;\n    skip?: boolean;\n  };\n  readonly type = EntityCacheAction.SAVE_ENTITIES_SUCCESS;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "data",
    "name": "ChangeSetOperation",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L3-L8",
        "signature": "export enum ChangeSetOperation {\n  Add = 'Add',\n  Delete = 'Delete',\n  Update = 'Update',\n  Upsert = 'Upsert',\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeSetAdd",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L9-L13",
        "signature": "interface ChangeSetAdd<T = any> {\n  op: ChangeSetOperation.Add;\n  entityName: string;\n  entities: T[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeSetDelete",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L15-L19",
        "signature": "interface ChangeSetDelete {\n  op: ChangeSetOperation.Delete;\n  entityName: string;\n  entities: string[] | number[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeSetUpdate",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L21-L25",
        "signature": "interface ChangeSetUpdate<T = any> {\n  op: ChangeSetOperation.Update;\n  entityName: string;\n  entities: Update<T>[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeSetUpsert",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L27-L31",
        "signature": "interface ChangeSetUpsert<T = any> {\n  op: ChangeSetOperation.Upsert;\n  entityName: string;\n  entities: T[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "ChangeSetItem",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L36-L40",
        "signature": "export type ChangeSetItem =\n  | ChangeSetAdd\n  | ChangeSetDelete\n  | ChangeSetUpdate\n  | ChangeSetUpsert;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A entities of a single entity type, which are changed in the same way by a ChangeSetOperation\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeSet",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L45-L57",
        "signature": "interface ChangeSet<T = any> {\n  changes: ChangeSetItem[];\n  extras?: T;\n  tag?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "ChangeSetItemFactory",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L62-L96",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Factory to create a ChangeSetItem for a ChangeSetOperation\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "add",
              "info": {
                "file": "modules/data/src/actions/entity-cache-change-set.ts#L64-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T | T[]"
                    }
                  ]
                ],
                "signature": "add<T>(entityName: string, entities: T | T[]): ChangeSetAdd<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/actions/entity-cache-change-set.ts#L70-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keys",
                      "description": "",
                      "type": "string | number | number[] | string[]"
                    }
                  ]
                ],
                "signature": "delete(  entityName: string,  keys: number | number[] | string | string[] ): ChangeSetDelete;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "update",
              "info": {
                "file": "modules/data/src/actions/entity-cache-change-set.ts#L83-L89",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "updates",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "update<T extends { id: string | number }>(  entityName: string,  updates: Update<T> | Update<T>[] ): ChangeSetUpdate<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsert",
              "info": {
                "file": "modules/data/src/actions/entity-cache-change-set.ts#L92-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T | T[]"
                    }
                  ]
                ],
                "signature": "upsert<T>(entityName: string, entities: T | T[]): ChangeSetUpsert<T>;"
              }
            }
          ]
        ],
        "signature": "class ChangeSetItemFactory {\n  add<T>(entityName: string, entities: T | T[]): ChangeSetAdd<T>;\n  delete(\n    entityName: string,\n    keys: number | number[] | string | string[]\n  ): ChangeSetDelete;\n  update<T extends { id: string | number }>(\n    entityName: string,\n    updates: Update<T> | Update<T>[]\n  ): ChangeSetUpdate<T>;\n  upsert<T>(entityName: string, entities: T | T[]): ChangeSetUpsert<T>;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "changeSetItemFactory",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L101-L101",
        "signature": "const changeSetItemFactory: ChangeSetItemFactory;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "excludeEmptyChangeSetItems",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-cache-change-set.ts#L107-L113",
        "signature": "function excludeEmptyChangeSetItems(changeSet: ChangeSet): ChangeSet;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Return ChangeSet after filtering out null and empty ChangeSetItems."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "changeSet",
              "description": "ChangeSet with changes to filter",
              "type": "ChangeSet<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "data",
    "name": "EntityOp",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-op.ts#L5-L84",
        "signature": "export enum EntityOp {\n  // Persistance operations\n  CANCEL_PERSIST = '@ngrx/data/cancel-persist',\n  CANCELED_PERSIST = '@ngrx/data/canceled-persist',\n\n  QUERY_ALL = '@ngrx/data/query-all',\n  QUERY_ALL_SUCCESS = '@ngrx/data/query-all/success',\n  QUERY_ALL_ERROR = '@ngrx/data/query-all/error',\n\n  QUERY_LOAD = '@ngrx/data/query-load',\n  QUERY_LOAD_SUCCESS = '@ngrx/data/query-load/success',\n  QUERY_LOAD_ERROR = '@ngrx/data/query-load/error',\n\n  QUERY_MANY = '@ngrx/data/query-many',\n  QUERY_MANY_SUCCESS = '@ngrx/data/query-many/success',\n  QUERY_MANY_ERROR = '@ngrx/data/query-many/error',\n\n  QUERY_BY_KEY = '@ngrx/data/query-by-key',\n  QUERY_BY_KEY_SUCCESS = '@ngrx/data/query-by-key/success',\n  QUERY_BY_KEY_ERROR = '@ngrx/data/query-by-key/error',\n\n  SAVE_ADD_MANY = '@ngrx/data/save/add-many',\n  SAVE_ADD_MANY_ERROR = '@ngrx/data/save/add-many/error',\n  SAVE_ADD_MANY_SUCCESS = '@ngrx/data/save/add-many/success',\n\n  SAVE_ADD_ONE = '@ngrx/data/save/add-one',\n  SAVE_ADD_ONE_ERROR = '@ngrx/data/save/add-one/error',\n  SAVE_ADD_ONE_SUCCESS = '@ngrx/data/save/add-one/success',\n\n  SAVE_DELETE_MANY = '@ngrx/data/save/delete-many',\n  SAVE_DELETE_MANY_SUCCESS = '@ngrx/data/save/delete-many/success',\n  SAVE_DELETE_MANY_ERROR = '@ngrx/data/save/delete-many/error',\n\n  SAVE_DELETE_ONE = '@ngrx/data/save/delete-one',\n  SAVE_DELETE_ONE_SUCCESS = '@ngrx/data/save/delete-one/success',\n  SAVE_DELETE_ONE_ERROR = '@ngrx/data/save/delete-one/error',\n\n  SAVE_UPDATE_MANY = '@ngrx/data/save/update-many',\n  SAVE_UPDATE_MANY_SUCCESS = '@ngrx/data/save/update-many/success',\n  SAVE_UPDATE_MANY_ERROR = '@ngrx/data/save/update-many/error',\n\n  SAVE_UPDATE_ONE = '@ngrx/data/save/update-one',\n  SAVE_UPDATE_ONE_SUCCESS = '@ngrx/data/save/update-one/success',\n  SAVE_UPDATE_ONE_ERROR = '@ngrx/data/save/update-one/error',\n\n  // Use only if the server supports upsert;\n  SAVE_UPSERT_MANY = '@ngrx/data/save/upsert-many',\n  SAVE_UPSERT_MANY_SUCCESS = '@ngrx/data/save/upsert-many/success',\n  SAVE_UPSERT_MANY_ERROR = '@ngrx/data/save/upsert-many/error',\n\n  // Use only if the server supports upsert;\n  SAVE_UPSERT_ONE = '@ngrx/data/save/upsert-one',\n  SAVE_UPSERT_ONE_SUCCESS = '@ngrx/data/save/upsert-one/success',\n  SAVE_UPSERT_ONE_ERROR = '@ngrx/data/save/upsert-one/error',\n\n  // Cache operations\n  ADD_ALL = '@ngrx/data/add-all',\n  ADD_MANY = '@ngrx/data/add-many',\n  ADD_ONE = '@ngrx/data/add-one',\n  REMOVE_ALL = '@ngrx/data/remove-all',\n  REMOVE_MANY = '@ngrx/data/remove-many',\n  REMOVE_ONE = '@ngrx/data/remove-one',\n  UPDATE_MANY = '@ngrx/data/update-many',\n  UPDATE_ONE = '@ngrx/data/update-one',\n  UPSERT_MANY = '@ngrx/data/upsert-many',\n  UPSERT_ONE = '@ngrx/data/upsert-one',\n\n  COMMIT_ALL = '@ngrx/data/commit-all',\n  COMMIT_MANY = '@ngrx/data/commit-many',\n  COMMIT_ONE = '@ngrx/data/commit-one',\n  UNDO_ALL = '@ngrx/data/undo-all',\n  UNDO_MANY = '@ngrx/data/undo-many',\n  UNDO_ONE = '@ngrx/data/undo-one',\n\n  SET_CHANGE_STATE = '@ngrx/data/set-change-state',\n  SET_COLLECTION = '@ngrx/data/set-collection',\n  SET_FILTER = '@ngrx/data/set-filter',\n  SET_LOADED = '@ngrx/data/set-loaded',\n  SET_LOADING = '@ngrx/data/set-loading',\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "OP_SUCCESS",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-op.ts#L87-L87",
        "signature": "const OP_SUCCESS: '/success';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "OP_ERROR",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-op.ts#L90-L90",
        "signature": "const OP_ERROR: '/error';",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "makeErrorOp",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-op.ts#L93-L95",
        "signature": "function makeErrorOp(op: EntityOp): EntityOp;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "op",
              "description": "",
              "type": "EntityOp"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "makeSuccessOp",
    "overloads": [
      {
        "file": "modules/data/src/actions/entity-op.ts#L98-L100",
        "signature": "function makeSuccessOp(op: EntityOp): EntityOp;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "op",
              "description": "",
              "type": "EntityOp"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "data",
    "name": "MergeStrategy",
    "overloads": [
      {
        "file": "modules/data/src/actions/merge-strategy.ts#L2-L20",
        "signature": "export enum MergeStrategy {\n  /**\n   * Update the collection entities and ignore all change tracking for this operation.\n   * Each entity's `changeState` is untouched.\n   */\n  IgnoreChanges,\n  /**\n   * Updates current values for unchanged entities.\n   * For each changed entity it preserves the current value and overwrites the `originalValue` with the merge entity.\n   * This is the query-success default.\n   */\n  PreserveChanges,\n  /**\n   * Replace the current collection entities.\n   * For each merged entity it discards the `changeState` and sets the `changeType` to \"unchanged\".\n   * This is the save-success default.\n   */\n  OverwriteChanges,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "UpdateResponseData",
    "overloads": [
      {
        "file": "modules/data/src/actions/update-response-data.ts#L9-L20",
        "signature": "interface UpdateResponseData<T> {\n  id: number | string;\n  changes: Partial<T>;\n  changed?: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Data returned in an EntityAction from the EntityEffects for SAVE_UPDATE_ONE_SUCCESS.\nEffectively extends Update<T> with a 'changed' flag.\nThe is true if the server sent back changes to the entity data after update.\nSuch changes must be in the entity data in changes property.\nDefault is false (server did not return entity data; assume it changed nothing).\nSee EntityEffects.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DataServiceError",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/data-service-error.ts#L12-L18",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Error from a DataService\nThe source error either comes from a failed HTTP response or was thrown within the service."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "the HttpErrorResponse or the error thrown by the service",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "requestData",
              "description": "the HTTP request information such as the method and the url.",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "message",
              "type": "string",
              "description": ""
            }
          ]
        ],
        "signature": "class DataServiceError {\n  message: string | null;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityActionDataServiceError",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/data-service-error.ts#L42-L45",
        "signature": "interface EntityActionDataServiceError {\n  error: DataServiceError;\n  originalAction: EntityAction;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultDataServiceConfig",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/default-data-service-config.ts#L7-L26",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Optional configuration settings for an entity collection data service\nsuch as the `DefaultDataService<T>`.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "root",
              "type": "string",
              "description": "/**\r\n   * root path of the web api.  may also include protocol, domain, and port\r\n   * for remote api, e.g.: `'https://api-domain.com:8000/api/v1'` (default: 'api')\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityHttpResourceUrls",
              "type": "EntityHttpResourceUrls",
              "description": "/**\r\n   * Known entity HttpResourceUrls.\r\n   * HttpUrlGenerator will create these URLs for entity types not listed here.\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "delete404OK",
              "type": "boolean",
              "description": "/** Is a DELETE 404 really OK? (default: true) */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "getDelay",
              "type": "number",
              "description": "/** Simulate GET latency in a demo (default: 0) */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "saveDelay",
              "type": "number",
              "description": "/** Simulate save method (PUT/POST/DELETE) latency in a demo (default: 0) */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "timeout",
              "type": "number",
              "description": "/** request timeout in MS (default: 0)*/"
            }
          ]
        ],
        "signature": "class DefaultDataServiceConfig {\n  root?: string;\n  entityHttpResourceUrls?: EntityHttpResourceUrls;\n  delete404OK?: boolean;\n  getDelay?: number;\n  saveDelay?: number;\n  timeout?: number;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultDataService",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/default-data.service.ts#L28-L195",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A basic, generic entity data service\nsuitable for persistence of most entities.\nAssumes a common REST-y web API\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "add",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L65-L69",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "add(entity: T): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L71-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "string | number"
                    }
                  ]
                ],
                "signature": "delete(key: number | string): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAll",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L82-L84",
                "info": [],
                "signature": "getAll(): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getById",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L86-L92",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "string | number"
                    }
                  ]
                ],
                "signature": "getById(key: number | string): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getWithQuery",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L94-L101",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string | QueryParams"
                    }
                  ]
                ],
                "signature": "getWithQuery(queryParams: QueryParams | string): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "update",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L103-L110",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "update",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "update(update: Update<T>): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsert",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L113-L117",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "upsert(entity: T): Observable<T>;"
              }
            }
          ]
        ],
        "signature": "class DefaultDataService<T> implements EntityCollectionDataService<T> {\n  add(entity: T): Observable<T>;\n  delete(key: number | string): Observable<number | string>;\n  getAll(): Observable<T[]>;\n  getById(key: number | string): Observable<T>;\n  getWithQuery(queryParams: QueryParams | string): Observable<T[]>;\n  update(update: Update<T>): Observable<T>;\n  upsert(entity: T): Observable<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultDataServiceFactory",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/default-data.service.ts#L202-L225",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a basic, generic entity data service\nsuitable for persistence of most entities.\nAssumes a common REST-y web API\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/dataservices/default-data.service.ts#L217-L224",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create a default {EntityCollectionDataService} for the given entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} Name of the entity type for this data service",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T>(entityName: string): EntityCollectionDataService<T>;"
              }
            }
          ]
        ],
        "signature": "class DefaultDataServiceFactory {\n  create<T>(entityName: string): EntityCollectionDataService<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCacheDataService",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/entity-cache-data.service.ts#L27-L166",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Default data service for making remote service calls targeting the entire EntityCache.\nSee EntityDataService for services that target a single EntityCollection\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "saveEntities",
              "info": {
                "file": "modules/data/src/dataservices/entity-cache-data.service.ts#L54-L76",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Save changes to multiple entities across one or more entity collections.\nServer endpoint must understand the essential SaveEntities protocol,\nin particular the ChangeSet interface (except for Update<T>).\nThis implementation extracts the entity changes from a ChangeSet Update<T>[] and sends those.\nIt then reconstructs Update<T>[] in the returned observable result."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changeSet",
                      "description": " An array of SaveEntityItems.",
                      "type": "ChangeSet<any>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "The server endpoint that receives this request.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "saveEntities(changeSet: ChangeSet, url: string): Observable<ChangeSet>;"
              }
            }
          ]
        ],
        "signature": "class EntityCacheDataService {\n  saveEntities(changeSet: ChangeSet, url: string): Observable<ChangeSet>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDataService",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/entity-data.service.ts#L10-L67",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registry of EntityCollection data services that make REST-like CRUD calls\nto entity collection endpoints.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getService",
              "info": {
                "file": "modules/data/src/dataservices/entity-data.service.ts#L26-L34",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get (or create) a data service for entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- the name of the type",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getService<T>(entityName: string): EntityCollectionDataService<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerService",
              "info": {
                "file": "modules/data/src/dataservices/entity-data.service.ts#L45-L50",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register an EntityCollectionDataService for an entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- the name of the entity type",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "service",
                      "description": "- data service for that entity type",
                      "type": "EntityCollectionDataService<T>"
                    }
                  ]
                ],
                "signature": "registerService<T>(  entityName: string,  service: EntityCollectionDataService<T> );"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerServices",
              "info": {
                "file": "modules/data/src/dataservices/entity-data.service.ts#L62-L66",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a batch of data services."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "services",
                      "description": "- data services to merge into existing services",
                      "type": "{ [name: string]: EntityCollectionDataService<any>; }"
                    }
                  ]
                ],
                "signature": "registerServices(services: {  [name: string]: EntityCollectionDataService<any>; });"
              }
            }
          ]
        ],
        "signature": "class EntityDataService {\n  getService<T>(entityName: string): EntityCollectionDataService<T>;\n  registerService<T>(\n    entityName: string,\n    service: EntityCollectionDataService<T>\n  );\n  registerServices(services: {\n    [name: string]: EntityCollectionDataService<any>;\n  });\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityHttpResourceUrls",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/http-url-generator.ts#L10-L12",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Known resource URLS for specific entity types.\nEach entity's resource URLS are endpoints that\ntarget single entity and multi-entity HTTP operations.\nUsed by the `DefaultHttpUrlGenerator`.\n"
            }
          ]
        ],
        "signature": "class EntityHttpResourceUrls {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "HttpResourceUrls",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/http-url-generator.ts#L18-L33",
        "signature": "interface HttpResourceUrls {\n  entityResourceUrl: string;\n  collectionResourceUrl: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Resource URLS for HTTP operations that target single entity\nand multi-entity endpoints.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "HttpUrlGenerator",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/http-url-generator.ts#L39-L59",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generate the base part of an HTTP URL for\nsingle entity or entity collection resource\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "entityResource",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L44-L44",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return the base URL for a single entity resource,\ne.g., the base URL to get a single hero by its id\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "root",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract entityResource(entityName: string, root: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "collectionResource",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L50-L50",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return the base URL for a collection resource,\ne.g., the base URL to get all heroes\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "root",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract collectionResource(entityName: string, root: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerHttpResourceUrls",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L56-L58",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register known single-entity and collection resource URLs for HTTP calls"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityHttpResourceUrls",
                      "description": "{EntityHttpResourceUrls} resource urls for specific entity type names",
                      "type": "EntityHttpResourceUrls"
                    }
                  ]
                ],
                "signature": "abstract registerHttpResourceUrls(  entityHttpResourceUrls?: EntityHttpResourceUrls ): void;"
              }
            }
          ]
        ],
        "signature": "class HttpUrlGenerator {\n  abstract entityResource(entityName: string, root: string): string;\n  abstract collectionResource(entityName: string, root: string): string;\n  abstract registerHttpResourceUrls(\n    entityHttpResourceUrls?: EntityHttpResourceUrls\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultHttpUrlGenerator",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/http-url-generator.ts#L61-L130",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "entityResource",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L102-L104",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create the path to a single entity resource"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} Name of the entity type, e.g, 'Hero'",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "root",
                      "description": "{string} Root path to the resource, e.g., 'some-api`",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "complete path to resource, e.g, 'some-api/hero'\n"
                    }
                  ]
                ],
                "signature": "entityResource(entityName: string, root: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "collectionResource",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L112-L114",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create the path to a multiple entity (collection) resource"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} Name of the entity type, e.g, 'Hero'",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "root",
                      "description": "{string} Root path to the resource, e.g., 'some-api`",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "complete path to resource, e.g, 'some-api/heroes'\n"
                    }
                  ]
                ],
                "signature": "collectionResource(entityName: string, root: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerHttpResourceUrls",
              "info": {
                "file": "modules/data/src/dataservices/http-url-generator.ts#L122-L129",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register known single-entity and collection resource URLs for HTTP calls"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityHttpResourceUrls",
                      "description": "{EntityHttpResourceUrls} resource urls for specific entity type names",
                      "type": "EntityHttpResourceUrls"
                    }
                  ]
                ],
                "signature": "registerHttpResourceUrls(  entityHttpResourceUrls: EntityHttpResourceUrls ): void;"
              }
            }
          ]
        ],
        "signature": "class DefaultHttpUrlGenerator implements HttpUrlGenerator {\n  entityResource(entityName: string, root: string): string;\n  collectionResource(entityName: string, root: string): string;\n  registerHttpResourceUrls(\n    entityHttpResourceUrls: EntityHttpResourceUrls\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "normalizeRoot",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/http-url-generator.ts#L133-L135",
        "signature": "function normalizeRoot(root: string);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "root",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionDataService",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/interfaces.ts#L5-L14",
        "signature": "interface EntityCollectionDataService<T> {\n  readonly name: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "HttpMethods",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/interfaces.ts#L16-L16",
        "signature": "export type HttpMethods = 'DELETE' | 'GET' | 'POST' | 'PUT';",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "RequestData",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/interfaces.ts#L18-L23",
        "signature": "interface RequestData {\n  method: HttpMethods;\n  url: string;\n  data?: any;\n  options?: any;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "QueryParams",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/interfaces.ts#L30-L32",
        "signature": "interface QueryParams {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A key/value map of parameters to be turned into an HTTP query string\nSame as HttpClient's HttpParamsOptions which is NOT exported at package level\nhttps://github.com/angular/angular/issues/22013\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "PersistenceResultHandler",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L16-L26",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Handling of responses from persistence operation\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "handleSuccess",
              "info": {
                "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L18-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalAction",
                      "description": "",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "abstract handleSuccess(originalAction: EntityAction): (data: any) => Action;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "handleError",
              "info": {
                "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L21-L25",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalAction",
                      "description": "",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "abstract handleError(  originalAction: EntityAction ): (  error: DataServiceError | Error ) => EntityAction<EntityActionDataServiceError>;"
              }
            }
          ]
        ],
        "signature": "class PersistenceResultHandler {\n  abstract handleSuccess(originalAction: EntityAction): (data: any) => Action;\n  abstract handleError(\n    originalAction: EntityAction\n  ): (\n    error: DataServiceError | Error\n  ) => EntityAction<EntityActionDataServiceError>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultPersistenceResultHandler",
    "overloads": [
      {
        "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L32-L72",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Default handling of responses from persistence operation,\nspecifically an EntityDataService\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "handleSuccess",
              "info": {
                "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L41-L48",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalAction",
                      "description": "",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "handleSuccess(originalAction: EntityAction): (data: any) => Action;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "handleError",
              "info": {
                "file": "modules/data/src/dataservices/persistence-result-handler.service.ts#L51-L71",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalAction",
                      "description": "",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "handleError(  originalAction: EntityAction ): (  error: DataServiceError | Error ) => EntityAction<EntityActionDataServiceError>;"
              }
            }
          ]
        ],
        "signature": "class DefaultPersistenceResultHandler implements PersistenceResultHandler {\n  handleSuccess(originalAction: EntityAction): (data: any) => Action;\n  handleError(\n    originalAction: EntityAction\n  ): (\n    error: DataServiceError | Error\n  ) => EntityAction<EntityActionDataServiceError>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCacheDispatcher",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L32-L219",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Dispatches Entity Cache actions to the EntityCache reducer\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L67-L70",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch an Action to the store."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "the Action",
                      "type": "any"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "the dispatched Action\n"
                    }
                  ]
                ],
                "signature": "dispatch(action: Action): Action;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "cancelSaveEntities",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L79-L95",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to cancel the saveEntities request with matching correlation id."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "correlationId",
                      "description": "The correlation id for the corresponding action",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[reason]",
                      "description": "explains why canceled and by whom.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[entityNames]",
                      "description": "array of entity names so can turn off loading flag for their collections.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[tag]",
                      "description": "tag to identify the operation from the app perspective.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reason",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityNames",
                      "description": "",
                      "type": "string[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "cancelSaveEntities(  correlationId: any,  reason?: string,  entityNames?: string[],  tag?: string ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCollections",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L102-L104",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[collections]",
                      "description": "Array of names of the collections to clear.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[tag]",
                      "description": "tag to identify the operation from the app perspective.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collections",
                      "description": "",
                      "type": "string[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "clearCollections(collections?: string[], tag?: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadCollections",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L113-L115",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Load multiple entity collections at the same time.\nbefore any selectors$ observables emit."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collections",
                      "description": "The collections to load, typically the result of a query.",
                      "type": "EntityCacheQuerySet"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[tag]",
                      "description": "tag to identify the operation from the app perspective.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "loadCollections(collections: EntityCacheQuerySet, tag?: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeQuerySet",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L128-L134",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merges entities from a query result\nthat returned entities from multiple collections.\nCorresponding entity cache reducer should add and update all collections\nat the same time, before any selectors$ observables emit."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "querySet",
                      "description": "The result of the query in the form of a map of entity collections.",
                      "type": "EntityCacheQuerySet"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "How to merge a queried entity when it is already in the collection.",
                      "type": "MergeStrategy"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[tag]",
                      "description": "tag to identify the operation from the app perspective.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "mergeQuerySet(  querySet: EntityCacheQuerySet,  mergeStrategy?: MergeStrategy,  tag?: string );"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setEntityCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L143-L145",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create entity cache action for replacing the entire entity cache.\nDangerous because brute force but useful as when re-hydrating an EntityCache\nfrom local browser storage when the application launches."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cache",
                      "description": "New state of the entity cache",
                      "type": "EntityCache"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[tag]",
                      "description": "tag to identify the operation from the app perspective.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "setEntityCache(cache: EntityCache, tag?: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "saveEntities",
              "info": {
                "file": "modules/data/src/dispatchers/entity-cache-dispatcher.ts#L161-L183",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save multiple entity changes to remote storage.\nRelies on an Ngrx Effect such as EntityEffects.saveEntities$.\nImportant: only call if your server supports the SaveEntities protocol\nthrough your EntityDataService.saveEntities method."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "Either the entities to save, as an array of {ChangeSetItem}, or",
                      "type": "ChangeSetItem[] | ChangeSet<any>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "The server url which receives the save request",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as tag, correlationId, isOptimistic, and mergeStrategy.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable<ChangeSet> with data returned from the server\nafter server reports successful save OR the save error.\nTODO: should return the matching entities from cache rather than the raw server data.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "saveEntities(  changes: ChangeSetItem[] | ChangeSet,  url: string,  options?: EntityActionOptions ): Observable<ChangeSet>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reducedActions$",
              "type": "Observable<any>",
              "description": "/**\r\n   * Actions scanned by the store after it processed them with reducers.\r\n   * A replay observable of the most recent action reduced by the store.\r\n   */"
            }
          ]
        ],
        "signature": "class EntityCacheDispatcher {\n  reducedActions$: Observable<Action>;\n\n  dispatch(action: Action): Action;\n  cancelSaveEntities(\n    correlationId: any,\n    reason?: string,\n    entityNames?: string[],\n    tag?: string\n  ): void;\n  clearCollections(collections?: string[], tag?: string);\n  loadCollections(collections: EntityCacheQuerySet, tag?: string);\n  mergeQuerySet(\n    querySet: EntityCacheQuerySet,\n    mergeStrategy?: MergeStrategy,\n    tag?: string\n  );\n  setEntityCache(cache: EntityCache, tag?: string);\n  saveEntities(\n    changes: ChangeSetItem[] | ChangeSet,\n    url: string,\n    options?: EntityActionOptions\n  ): Observable<ChangeSet>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityServerCommands",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-commands.ts#L6-L114",
        "signature": "interface EntityServerCommands<T> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCacheCommands",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-commands.ts#L118-L242",
        "signature": "interface EntityCacheCommands<T> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCommands",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-commands.ts#L245-L247",
        "signature": "interface EntityCommands<T> {\n  // inherited from EntityServerCommands\n  // inherited from EntityCacheCommands\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDispatcherBase",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L34-L628",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Dispatches EntityCollection actions to their reducers and effects (default implementation).\nAll save commands rely on an Ngrx Effect such as `EntityEffects.persist$`.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createEntityAction",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L84-L95",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an {EntityAction} for this entity type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOp",
                      "description": "{EntityOp} the entity operation",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[data]",
                      "description": "the action data",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "additional options",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "the EntityAction\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "createEntityAction<P = any>(  entityOp: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createAndDispatch",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L105-L113",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an {EntityAction} for this entity type and\ndispatch it immediately to the store."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op",
                      "description": "{EntityOp} the entity operation",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[data]",
                      "description": "the action data",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "additional options",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "the dispatched EntityAction\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "createAndDispatch<P = any>(  op: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L120-L123",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch an Action to the store."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "the Action",
                      "type": "any"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "the dispatched Action\n"
                    }
                  ]
                ],
                "signature": "dispatch(action: Action): Action;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "add",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L134-L155",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save a new entity to remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "entity to add, which may omit its key if pessimistic and the server creates the key;",
                      "type": "T"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "add(entity: T, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "cancel",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L164-L173",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to cancel the persistence operation (query or save).\nWill cause save observable to error with a PersistenceCancel error.\nCaller is responsible for undoing changes in cache from pending optimistic save"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "correlationId",
                      "description": "The correlation id for the corresponding EntityAction",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[reason]",
                      "description": "explains why canceled and by whom.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reason",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "cancel(  correlationId: any,  reason?: string,  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L193-L213",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "arg",
                      "description": "",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(  arg: number | string | T,  options?: EntityActionOptions ): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L181-L181",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to delete entity from remote storage by key."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to remove",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the deleted key\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(entity: T, options?: EntityActionOptions): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L189-L192",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to delete entity from remote storage by key."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The entity to delete",
                      "type": "string | number"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the deleted key\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(  key: number | string,  options?: EntityActionOptions ): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAll",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L222-L242",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for all entities and\nmerge the queried entities into the cached collection."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the queried entities that are in the collection\nafter server reports success query or the query error."
                    }
                  ],
                  ["see", { "__kind": "heading", "description": "load()\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getAll(options?: EntityActionOptions): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getByKey",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L251-L264",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for the entity with this primary key.\nIf the server returns an entity,\nmerge it into the cached collection."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the collection\nafter server reports successful query or the query error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getByKey(key: any, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getWithQuery",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L274-L301",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for the entities that satisfy a query expressed\nwith either a query parameter map or an HTTP URL query string,\nand merge the results into the cached collection."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "the query in a form understood by the server",
                      "type": "string | QueryParams"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the queried entities\nafter server reports successful query or the query error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getWithQuery(  queryParams: QueryParams | string,  options?: EntityActionOptions ): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L310-L317",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for all entities and\ncompletely replace the cached collection with the queried entities."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the entities in the collection\nafter server reports successful query or the query error."
                    }
                  ],
                  ["see", { "__kind": "heading", "description": "getAll\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "load(options?: EntityActionOptions): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "update",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L327-L355",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save the updated entity (or partial entity) in remote storage.\nThe update entity may be partial (but must have its key)\nin which case it patches the existing entity."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "update entity, which might be a partial of T but must at least have its key.",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the updated entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "update(entity: Partial<T>, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsert",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L365-L386",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save a new or existing entity to remote storage.\nOnly dispatch this action if your server supports upsert."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "entity to add, which may omit its key if pessimistic and the server creates the key;",
                      "type": "T"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A terminating Observable of the entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsert(entity: T, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addAllToCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L401-L403",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Replace all entities in the cached collection.\nDoes not save to remote storage.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addAllToCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addOneToCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L410-L412",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add a new entity directly to the cache.\nDoes not save to remote storage.\nIgnored if an entity with the same primary key is already in cache.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addOneToCache(entity: T, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addManyToCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L419-L421",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add multiple new entities directly to the cache.\nDoes not save to remote storage.\nEntities with primary keys already in cache are ignored.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addManyToCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L424-L426",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "clearCache(options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L441-L446",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "arg",
                      "description": "",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(  arg: (number | string) | T,  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L433-L433",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove an entity directly from the cache.\nDoes not delete that entity from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "The entity to remove",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(entity: T, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L440-L440",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove an entity directly from the cache.\nDoes not delete that entity from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to remove",
                      "type": "string | number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(key: number | string, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L464-L477",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "args",
                      "description": "",
                      "type": "(string | number)[] | T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(  args: (number | string)[] | T[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L453-L453",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove multiple entities directly from the cache.\nDoes not delete these entities from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "The entities to remove",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L460-L463",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove multiple entities directly from the cache.\nDoes not delete these entities from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keys",
                      "description": "The primary keys of the entities to remove",
                      "type": "(string | number)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(  keys: (number | string)[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateOneInCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L486-L491",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Update a cached entity directly.\nDoes not update that entity in remote storage.\nIgnored if an entity with matching primary key is not in cache.\nThe update entity may be partial (but must have its key)\nin which case it patches the existing entity.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateManyInCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L500-L511",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Update multiple cached entities directly.\nDoes not update these entities in remote storage.\nEntities whose primary keys are not in cache are ignored.\nUpdate entities may be partial but must at least have their keys.\nsuch partial entities patch their cached counterparts.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "Partial<T>[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "updateManyInCache(  entities: Partial<T>[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsertOneInCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L519-L521",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add or update a new entity directly to the cache.\nDoes not save to remote storage.\nUpsert entity might be a partial of T but must at least have its key.\nPass the Update<T> structure as the payload\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsertManyInCache",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L527-L535",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add or update multiple cached entities directly.\nDoes not save to remote storage.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "Partial<T>[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsertManyInCache(  entities: Partial<T>[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setFilter",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L541-L543",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Set the pattern that the collection's filter applies\nwhen using the `filteredEntities` selector.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pattern",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "setFilter(pattern: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setLoaded",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L546-L548",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isLoaded",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setLoaded(isLoaded: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setLoading",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-base.ts#L551-L553",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isLoading",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setLoading(isLoading: boolean): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "guard",
              "type": "EntityActionGuard<T>",
              "description": "/** Utility class with methods to validate EntityAction payloads.*/"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "toUpdate",
              "type": "(entity: Partial<T>) => any",
              "description": "/**\r\n   * Convert an entity (or partial entity) into the `Update<T>` object\r\n   * `update...` and `upsert...` methods take `Update<T>` args\r\n   */"
            }
          ]
        ],
        "signature": "class EntityDispatcherBase<T> implements EntityDispatcher<T> {\n  guard: EntityActionGuard<T>;\n  toUpdate: (entity: Partial<T>) => Update<T>;\n\n  createEntityAction<P = any>(\n    entityOp: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  createAndDispatch<P = any>(\n    op: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  dispatch(action: Action): Action;\n  add(entity: T, options?: EntityActionOptions): Observable<T>;\n  cancel(\n    correlationId: any,\n    reason?: string,\n    options?: EntityActionOptions\n  ): void;\n  delete(\n    arg: number | string | T,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n  delete(entity: T, options?: EntityActionOptions): Observable<number | string>;\n  delete(\n    key: number | string,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n  getAll(options?: EntityActionOptions): Observable<T[]>;\n  getByKey(key: any, options?: EntityActionOptions): Observable<T>;\n  getWithQuery(\n    queryParams: QueryParams | string,\n    options?: EntityActionOptions\n  ): Observable<T[]>;\n  load(options?: EntityActionOptions): Observable<T[]>;\n  update(entity: Partial<T>, options?: EntityActionOptions): Observable<T>;\n  upsert(entity: T, options?: EntityActionOptions): Observable<T>;\n  addAllToCache(entities: T[], options?: EntityActionOptions): void;\n  addOneToCache(entity: T, options?: EntityActionOptions): void;\n  addManyToCache(entities: T[], options?: EntityActionOptions): void;\n  clearCache(options?: EntityActionOptions): void;\n  removeOneFromCache(\n    arg: (number | string) | T,\n    options?: EntityActionOptions\n  ): void;\n  removeOneFromCache(entity: T, options?: EntityActionOptions): void;\n  removeOneFromCache(key: number | string, options?: EntityActionOptions): void;\n  removeManyFromCache(\n    args: (number | string)[] | T[],\n    options?: EntityActionOptions\n  ): void;\n  removeManyFromCache(entities: T[], options?: EntityActionOptions): void;\n  removeManyFromCache(\n    keys: (number | string)[],\n    options?: EntityActionOptions\n  ): void;\n  updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n  updateManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n  upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n  upsertManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n  setFilter(pattern: any): void;\n  setLoaded(isLoaded: boolean): void;\n  setLoading(isLoading: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDispatcherDefaultOptions",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-dispatcher-default-options.ts#L10-L22",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Default options for EntityDispatcher behavior\nsuch as whether `add()` is optimistic or pessimistic by default.\nAn optimistic save modifies the collection immediately and before saving to the server.\nA pessimistic save modifies the collection after the server confirms the save was successful.\nThis class initializes the defaults to the safest values.\nProvide an alternative to change the defaults for all entity collections.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optimisticAdd",
              "type": "boolean",
              "description": "/** True if added entities are saved optimistically; false if saved pessimistically. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optimisticDelete",
              "type": "boolean",
              "description": "/** True if deleted entities are saved optimistically; false if saved pessimistically. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optimisticUpdate",
              "type": "boolean",
              "description": "/** True if updated entities are saved optimistically; false if saved pessimistically. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optimisticUpsert",
              "type": "boolean",
              "description": "/** True if upsert entities are saved optimistically; false if saved pessimistically. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optimisticSaveEntities",
              "type": "boolean",
              "description": "/** True if entities in a cache saveEntities request are saved optimistically; false if saved pessimistically. */"
            }
          ]
        ],
        "signature": "class EntityDispatcherDefaultOptions {\n  optimisticAdd = false;\n  optimisticDelete = true;\n  optimisticUpdate = false;\n  optimisticUpsert = false;\n  optimisticSaveEntities = false;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDispatcherFactory",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-dispatcher-factory.ts#L20-L82",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-factory.ts#L49-L77",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an `EntityDispatcher` for an entity type `T` and store.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selectId",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "defaultOptions",
                      "description": "",
                      "type": "Partial<EntityDispatcherDefaultOptions>"
                    }
                  ]
                ],
                "signature": "create<T>(  /** Name of the entity type */  entityName: string,  /**   * Function that returns the primary key for an entity `T`.   * Usually acquired from `EntityDefinition` metadata.   */  selectId: IdSelector<T> = defaultSelectId,  /** Defaults for options that influence dispatcher behavior such as whether   * `add()` is optimistic or pessimistic;   */  defaultOptions: Partial<EntityDispatcherDefaultOptions> = {} ): EntityDispatcher<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/data/src/dispatchers/entity-dispatcher-factory.ts#L79-L81",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reducedActions$",
              "type": "Observable<any>",
              "description": "/**\r\n   * Actions scanned by the store after it processed them with reducers.\r\n   * A replay observable of the most recent action reduced by the store.\r\n   */"
            }
          ]
        ],
        "signature": "class EntityDispatcherFactory implements OnDestroy {\n  reducedActions$: Observable<Action>;\n\n  create<T>(\n    /** Name of the entity type */\n    entityName: string,\n    /**\n     * Function that returns the primary key for an entity `T`.\n     * Usually acquired from `EntityDefinition` metadata.\n     */\n    selectId: IdSelector<T> = defaultSelectId,\n    /** Defaults for options that influence dispatcher behavior such as whether\n     * `add()` is optimistic or pessimistic;\n     */\n    defaultOptions: Partial<EntityDispatcherDefaultOptions> = {}\n  ): EntityDispatcher<T>;\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityDispatcher",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-dispatcher.ts#L14-L68",
        "signature": "interface EntityDispatcher<T> {\n  readonly entityName: string;\n  readonly guard: EntityActionGuard<T>;\n  readonly selectId: IdSelector<T>;\n  readonly store: Store<EntityCache>;\n\n  // inherited from EntityCommands\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Dispatches EntityCollection actions to their reducers and effects.\nThe substance of the interface is in EntityCommands.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "PersistanceCanceled",
    "overloads": [
      {
        "file": "modules/data/src/dispatchers/entity-dispatcher.ts#L73-L77",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Persistence operation canceled\n"
            }
          ]
        ],
        "signature": "class PersistanceCanceled {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCacheEffects",
    "overloads": [
      {
        "file": "modules/data/src/effects/entity-cache-effects.ts#L42-L192",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "saveEntities",
              "info": {
                "file": "modules/data/src/effects/entity-cache-effects.ts#L89-L134",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Perform the requested SaveEntities actions and return a scalar Observable<Action>\nthat the effect should dispatch to the store after the server responds."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "The SaveEntities action",
                      "type": "SaveEntities"
                    }
                  ]
                ],
                "signature": "saveEntities(action: SaveEntities): Observable<Action>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "saveEntitiesCancel$",
              "type": "Observable<SaveEntitiesCancel>",
              "description": "/**\r\n   * Observable of SAVE_ENTITIES_CANCEL actions with non-null correlation ids\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "saveEntities$",
              "type": "Observable<any>",
              "description": ""
            }
          ]
        ],
        "signature": "class EntityCacheEffects {\n  saveEntitiesCancel$: Observable<SaveEntitiesCancel> = createEffect(\n    () =>\n      this.actions.pipe(\n        ofType(EntityCacheAction.SAVE_ENTITIES_CANCEL),\n        filter((a: SaveEntitiesCancel) => a.payload.correlationId != null)\n      ),\n    { dispatch: false }\n  );\n  saveEntities$: Observable<Action> = createEffect(() =>\n    this.actions.pipe(\n      ofType(EntityCacheAction.SAVE_ENTITIES),\n      mergeMap((action: SaveEntities) => this.saveEntities(action))\n    )\n  );\n\n  saveEntities(action: SaveEntities): Observable<Action>;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "persistOps",
    "overloads": [
      {
        "file": "modules/data/src/effects/entity-effects.ts#L19-L28",
        "signature": "const persistOps: EntityOp[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityEffects",
    "overloads": [
      {
        "file": "modules/data/src/effects/entity-effects.ts#L30-L199",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "persist",
              "info": {
                "file": "modules/data/src/effects/entity-effects.ts#L77-L108",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Perform the requested persistence operation and return a scalar Observable<Action>\nthat the effect should dispatch to the store after the server responds."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "A persistence operation EntityAction",
                      "type": "EntityAction<any>"
                    }
                  ]
                ],
                "signature": "persist(action: EntityAction): Observable<Action>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "cancel$",
              "type": "Observable<any>",
              "description": "/**\r\n   * Observable of non-null cancellation correlation ids from CANCEL_PERSIST actions\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "persist$",
              "type": "Observable<any>",
              "description": ""
            }
          ]
        ],
        "signature": "class EntityEffects {\n  cancel$: Observable<any> = createEffect(\n    () =>\n      this.actions.pipe(\n        ofEntityOp(EntityOp.CANCEL_PERSIST),\n        map((action: EntityAction) => action.payload.correlationId),\n        filter((id) => id != null)\n      ),\n    { dispatch: false }\n  );\n  persist$: Observable<Action> = createEffect(() =>\n    this.actions.pipe(\n      ofEntityOp(persistOps),\n      mergeMap((action) => this.persist(action))\n    )\n  );\n\n  persist(action: EntityAction): Observable<Action>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityDefinitions",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L10-L12",
        "signature": "interface EntityDefinitions {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDefinitionService",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L15-L108",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefinition",
              "info": {
                "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L38-L48",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get (or create) a data service for entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- the name of the type",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "shouldThrow",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "getDefinition<T>(  entityName: string,  shouldThrow = true ): EntityDefinition<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerMetadata",
              "info": {
                "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L60-L65",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create and register the {EntityDefinition} for the {EntityMetadata} of an entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "- the name of the entity type",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "definition",
                      "description": "- {EntityMetadata} for a collection for that entity type",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadata",
                      "description": "",
                      "type": "EntityMetadata<any, {}>"
                    }
                  ]
                ],
                "signature": "registerMetadata(metadata: EntityMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerMetadataMap",
              "info": {
                "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L77-L82",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register an EntityMetadataMap."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadataMap",
                      "description": "- a map of entityType names to entity metadata",
                      "type": "EntityMetadataMap"
                    }
                  ]
                ],
                "signature": "registerMetadataMap(metadataMap: EntityMetadataMap = {});"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerDefinition",
              "info": {
                "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L91-L93",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register an {EntityDefinition} for an entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "definition",
                      "description": "- EntityDefinition of a collection for that entity type",
                      "type": "EntityDefinition<T>"
                    }
                  ]
                ],
                "signature": "registerDefinition<T>(definition: EntityDefinition<T>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerDefinitions",
              "info": {
                "file": "modules/data/src/entity-metadata/entity-definition.service.ts#L105-L107",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a batch of EntityDefinitions."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "definitions",
                      "description": "- map of entityType name and associated EntityDefinitions to merge.",
                      "type": "EntityDefinitions"
                    }
                  ]
                ],
                "signature": "registerDefinitions(definitions: EntityDefinitions);"
              }
            }
          ]
        ],
        "signature": "class EntityDefinitionService {\n  getDefinition<T>(entityName: string, shouldThrow = true): EntityDefinition<T>;\n  registerMetadata(metadata: EntityMetadata);\n  registerMetadataMap(metadataMap: EntityMetadataMap = {});\n  registerDefinition<T>(definition: EntityDefinition<T>);\n  registerDefinitions(definitions: EntityDefinitions);\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityDefinition",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-definition.ts#L9-L18",
        "signature": "interface EntityDefinition<T = any> {\n  entityName: string;\n  entityAdapter: EntityAdapter<T>;\n  entityDispatcherOptions?: Partial<EntityDispatcherDefaultOptions>;\n  initialState: EntityCollection<T>;\n  metadata: EntityMetadata<T>;\n  noChangeTracking: boolean;\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "createEntityDefinition",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-definition.ts#L20-L57",
        "signature": "function createEntityDefinition<T, S extends object>(\n  metadata: EntityMetadata<T, S>\n): EntityDefinition<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "",
              "type": "EntityMetadata<T, S>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "EntityFilterFn",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-filters.ts#L6-L6",
        "signature": "export type EntityFilterFn<T> = (entities: T[], pattern?: any) => T[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Filters the `entities` array argument and returns the original `entities`,\nor a new filtered array of entities.\nNEVER mutate the original `entities` array itself.\n/"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "PropsFilterFnFactory",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-filters.ts#L13-L34",
        "signature": "function PropsFilterFnFactory<T = any>(\n  props: (keyof T)[] = []\n): EntityFilterFn<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an {EntityFilterFn} that matches RegExp or RegExp string pattern\nanywhere in any of the given props of an entity.\nIf pattern is a string, spaces are significant and ignores case.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "props",
              "description": "",
              "type": "(keyof T)[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_METADATA_TOKEN",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-metadata.ts#L8-L10",
        "signature": "const ENTITY_METADATA_TOKEN: InjectionToken<EntityMetadataMap>;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityMetadata",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-metadata.ts#L13-L21",
        "signature": "interface EntityMetadata<T = any, S extends object = {}> {\n  entityName: string;\n  entityDispatcherOptions?: Partial<EntityDispatcherDefaultOptions>;\n  filterFn?: EntityFilterFn<T>;\n  noChangeTracking?: boolean;\n  selectId?: IdSelector<T>;\n  sortComparer?: false | Comparer<T>;\n  additionalCollectionState?: S;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityMetadataMap",
    "overloads": [
      {
        "file": "modules/data/src/entity-metadata/entity-metadata.ts#L24-L26",
        "signature": "interface EntityMetadataMap {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionServiceBase",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L28-L471",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base class for a concrete EntityCollectionService<T>.\nCan be instantiated. Cannot be injected. Use EntityCollectionServiceFactory to create."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "EntityCollectionServiceElements",
              "description": "The ingredients for this service",
              "type": ""
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createEntityAction",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L82-L88",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an {EntityAction} for this entity type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op",
                      "description": "{EntityOp} the entity operation",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[data]",
                      "description": "the action data",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "additional options",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "the EntityAction\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "createEntityAction<P = any>(  op: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createAndDispatch",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L98-L104",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an {EntityAction} for this entity type and\ndispatch it immediately to the store."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op",
                      "description": "{EntityOp} the entity operation",
                      "type": "EntityOp"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[data]",
                      "description": "the action data",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "additional options",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "the dispatched EntityAction\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "data",
                      "description": "",
                      "type": "P"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "createAndDispatch<P = any>(  op: EntityOp,  data?: P,  options?: EntityActionOptions ): EntityAction<P>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L111-L113",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch an action of any type to the ngrx store."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "the Action",
                      "type": "any"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "the dispatched Action\n"
                    }
                  ]
                ],
                "signature": "dispatch(action: Action): Action;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "add",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L144-L146",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save a new entity to remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "entity to add, which may omit its key if pessimistic and the server creates the key;",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence save and merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "add(entity: T, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "cancel",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L154-L160",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to cancel the persistence operation (query or save) with the given correlationId."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "correlationId",
                      "description": "The correlation id for the corresponding EntityAction",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[reason]",
                      "description": "explains why canceled and by whom.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as the tag and mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reason",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "cancel(  correlationId: any,  reason?: string,  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L182-L187",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "arg",
                      "description": "",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(  arg: number | string | T,  options?: EntityActionOptions ): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L169-L169",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to delete entity from remote storage by key."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The entity to delete",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence save and merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the deleted key\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(entity: T, options?: EntityActionOptions): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "delete",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L178-L181",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to delete entity from remote storage by key."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to remove",
                      "type": "string | number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence save and merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the deleted key\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "delete(  key: number | string,  options?: EntityActionOptions ): Observable<number | string>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAll",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L197-L199",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for all entities and\nmerge the queried entities into the cached collection."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the collection\nafter server reports successful query or the query error."
                    }
                  ],
                  ["see", { "__kind": "heading", "description": "load()\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getAll(options?: EntityActionOptions): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getByKey",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L210-L212",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for the entity with this primary key.\nIf the server returns an entity,\nmerge it into the cached collection."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to get.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the queried entity that is in the collection\nafter server reports success or the query error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getByKey(key: any, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getWithQuery",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L223-L228",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for the entities that satisfy a query expressed\nwith either a query parameter map or an HTTP URL query string,\nand merge the results into the cached collection."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "the query in a form understood by the server",
                      "type": "string | QueryParams"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the queried entities\nafter server reports successful query or the query error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "getWithQuery(  queryParams: QueryParams | string,  options?: EntityActionOptions ): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L238-L240",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to query remote storage for all entities and\ncompletely replace the cached collection with the queried entities."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence load behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the collection\nafter server reports successful query or the query error."
                    }
                  ],
                  ["see", { "__kind": "heading", "description": "getAll\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "load(options?: EntityActionOptions): Observable<T[]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "update",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L251-L253",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save the updated entity (or partial entity) in remote storage.\nThe update entity may be partial (but must have its key)\nin which case it patches the existing entity."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "update entity, which might be a partial of T but must at least have its key.",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence save and merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the updated entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "update(entity: Partial<T>, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsert",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L265-L267",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Dispatch action to save a new or existing entity to remote storage.\nCall only if the server supports upsert."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "entity to add or upsert.",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options that influence save and merge behavior",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Observable of the entity\nafter server reports successful save or the save error.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsert(entity: T, options?: EntityActionOptions): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addAllToCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L277-L279",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Replace all entities in the cached collection.\nDoes not save to remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "to add directly to cache.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addAllToCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addOneToCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L288-L290",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add a new entity directly to the cache.\nDoes not save to remote storage.\nIgnored if an entity with the same primary key is already in cache."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "to add directly to cache.",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addOneToCache(entity: T, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addManyToCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L299-L301",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add multiple new entities directly to the cache.\nDoes not save to remote storage.\nEntities with primary keys already in cache are ignored."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "to add directly to cache.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "addManyToCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L304-L306",
                "info": [],
                "signature": "clearCache(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L323-L328",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "arg",
                      "description": "",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(  arg: (number | string) | T,  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L314-L314",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove an entity directly from the cache.\nDoes not delete that entity from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "The entity to remove",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(entity: T, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeOneFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L322-L322",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove an entity directly from the cache.\nDoes not delete that entity from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to remove",
                      "type": "string | number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeOneFromCache(key: number | string, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L348-L353",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "args",
                      "description": "",
                      "type": "(string | number)[] | T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(  args: (number | string)[] | T[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L336-L336",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove multiple entities directly from the cache.\nDoes not delete these entities from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "The entities to remove",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(entities: T[], options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeManyFromCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L344-L347",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove multiple entities directly from the cache.\nDoes not delete these entities from remote storage."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keys",
                      "description": "The primary keys of the entities to remove",
                      "type": "(string | number)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "removeManyFromCache(  keys: (number | string)[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateOneInCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L364-L368",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Update a cached entity directly.\nDoes not update that entity in remote storage.\nIgnored if an entity with matching primary key is not in cache.\nThe update entity may be partial (but must have its key)\nin which case it patches the existing entity."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "to update directly in cache.",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateManyInCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L379-L384",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Update multiple cached entities directly.\nDoes not update these entities in remote storage.\nEntities whose primary keys are not in cache are ignored.\nUpdate entities may be partial but must at least have their keys.\nsuch partial entities patch their cached counterparts."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "to update directly in cache.",
                      "type": "Partial<T>[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "updateManyInCache(  entities: Partial<T>[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsertOneInCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L394-L396",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Insert or update a cached entity directly.\nDoes not save to remote storage.\nUpsert entity might be a partial of T but must at least have its key.\nPass the Update<T> structure as the payload."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "to upsert directly in cache.",
                      "type": "Partial<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "upsertManyInCache",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L406-L411",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Insert or update multiple cached entities directly.\nDoes not save to remote storage.\nUpsert entities might be partial but must at least have their keys.\nPass an array of the Update<T> structure as the payload."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "to upsert directly in cache.",
                      "type": "Partial<T>[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[options]",
                      "description": "options such as mergeStrategy",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "EntityActionOptions"
                    }
                  ]
                ],
                "signature": "upsertManyInCache(  entities: Partial<T>[],  options?: EntityActionOptions ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setFilter",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L417-L419",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Set the pattern that the collection's filter applies\nwhen using the `filteredEntities` selector.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pattern",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "setFilter(pattern: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setLoaded",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L422-L424",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isLoaded",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setLoaded(isLoaded: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setLoading",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-base.ts#L427-L429",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isLoading",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setLoading(isLoading: boolean): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "dispatcher",
              "type": "EntityDispatcher<T>",
              "description": "/** Dispatcher of EntityCommands (EntityActions) */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selectors",
              "type": "EntitySelectors<T>",
              "description": "/** All selectors of entity collection properties */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selectors$",
              "type": "S$",
              "description": "/** All selectors$ (observables of entity collection properties) */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "guard",
              "type": "EntityActionGuard<T>",
              "description": "/**\r\n   * Utility class with methods to validate EntityAction payloads.\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selectId",
              "type": "any",
              "description": "/** Returns the primary key (id) of this entity */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "toUpdate",
              "type": "(entity: Partial<T>) => any",
              "description": "/**\r\n   * Convert an entity (or partial entity) into the `Update<T>` object\r\n   * `update...` and `upsert...` methods take `Update<T>` args\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "collection$",
              "type": "any",
              "description": "/** Observable of the collection as a whole */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "count$",
              "type": "any",
              "description": "/** Observable of count of entities in the cached collection. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entities$",
              "type": "any",
              "description": "/** Observable of all entities in the cached collection. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityActions$",
              "type": "Observable<EntityAction<any>>",
              "description": "/** Observable of actions related to this entity type. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityMap$",
              "type": "any",
              "description": "/** Observable of the map of entity keys to entities */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "errors$",
              "type": "Observable<EntityAction<any>>",
              "description": "/** Observable of error actions related to this entity type. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "filter$",
              "type": "any",
              "description": "/** Observable of the filter pattern applied by the entity collection's filter function */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "filteredEntities$",
              "type": "any",
              "description": "/** Observable of entities in the cached collection that pass the filter function */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "keys$",
              "type": "any",
              "description": "/** Observable of the keys of the cached collection, in the collection's native sort order */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "loaded$",
              "type": "any",
              "description": "/** Observable true when the collection has been loaded */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "loading$",
              "type": "any",
              "description": "/** Observable true when a multi-entity query command is in progress. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeState$",
              "type": "any",
              "description": "/** Original entity values for entities with unsaved changes */"
            }
          ]
        ],
        "signature": "class EntityCollectionServiceBase<\n  T,\n  S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n> implements EntityCollectionService<T> {\n  readonly dispatcher: EntityDispatcher<T>;\n  readonly selectors: EntitySelectors<T>;\n  readonly selectors$: S$;\n  guard: EntityActionGuard<T>;\n  selectId: IdSelector<T>;\n  toUpdate: (entity: Partial<T>) => Update<T>;\n  collection$: Observable<EntityCollection<T>> | Store<EntityCollection<T>>;\n  count$: Observable<number> | Store<number>;\n  entities$: Observable<T[]> | Store<T[]>;\n  entityActions$: Observable<EntityAction>;\n  entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;\n  errors$: Observable<EntityAction>;\n  filter$: Observable<any> | Store<any>;\n  filteredEntities$: Observable<T[]> | Store<T[]>;\n  keys$: Observable<string[] | number[]> | Store<string[] | number[]>;\n  loaded$: Observable<boolean> | Store<boolean>;\n  loading$: Observable<boolean> | Store<boolean>;\n  changeState$: Observable<ChangeStateMap<T>> | Store<ChangeStateMap<T>>;\n\n  createEntityAction<P = any>(\n    op: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  createAndDispatch<P = any>(\n    op: EntityOp,\n    data?: P,\n    options?: EntityActionOptions\n  ): EntityAction<P>;\n  dispatch(action: Action): Action;\n  add(entity: T, options?: EntityActionOptions): Observable<T>;\n  cancel(\n    correlationId: any,\n    reason?: string,\n    options?: EntityActionOptions\n  ): void;\n  delete(\n    arg: number | string | T,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n  delete(entity: T, options?: EntityActionOptions): Observable<number | string>;\n  delete(\n    key: number | string,\n    options?: EntityActionOptions\n  ): Observable<number | string>;\n  getAll(options?: EntityActionOptions): Observable<T[]>;\n  getByKey(key: any, options?: EntityActionOptions): Observable<T>;\n  getWithQuery(\n    queryParams: QueryParams | string,\n    options?: EntityActionOptions\n  ): Observable<T[]>;\n  load(options?: EntityActionOptions): Observable<T[]>;\n  update(entity: Partial<T>, options?: EntityActionOptions): Observable<T>;\n  upsert(entity: T, options?: EntityActionOptions): Observable<T>;\n  addAllToCache(entities: T[], options?: EntityActionOptions): void;\n  addOneToCache(entity: T, options?: EntityActionOptions): void;\n  addManyToCache(entities: T[], options?: EntityActionOptions): void;\n  clearCache(): void;\n  removeOneFromCache(\n    arg: (number | string) | T,\n    options?: EntityActionOptions\n  ): void;\n  removeOneFromCache(entity: T, options?: EntityActionOptions): void;\n  removeOneFromCache(key: number | string, options?: EntityActionOptions): void;\n  removeManyFromCache(\n    args: (number | string)[] | T[],\n    options?: EntityActionOptions\n  ): void;\n  removeManyFromCache(entities: T[], options?: EntityActionOptions): void;\n  removeManyFromCache(\n    keys: (number | string)[],\n    options?: EntityActionOptions\n  ): void;\n  updateOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n  updateManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n  upsertOneInCache(entity: Partial<T>, options?: EntityActionOptions): void;\n  upsertManyInCache(\n    entities: Partial<T>[],\n    options?: EntityActionOptions\n  ): void;\n  setFilter(pattern: any): void;\n  setLoaded(isLoaded: boolean): void;\n  setLoading(isLoading: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionServiceElements",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-collection-service-elements-factory.ts#L15-L23",
        "signature": "interface EntityCollectionServiceElements<\n  T,\n  S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n> {\n  readonly dispatcher: EntityDispatcher<T>;\n  readonly entityName: string;\n  readonly selectors: EntitySelectors<T>;\n  readonly selectors$: S$;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionServiceElementsFactory",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-collection-service-elements-factory.ts#L26-L65",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-elements-factory.ts#L39-L64",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the ingredients for making an EntityCollectionService for this entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- name of the entity type",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(  entityName: string ): EntityCollectionServiceElements<T, S$>;"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionServiceElementsFactory {\n  create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(\n    entityName: string\n  ): EntityCollectionServiceElements<T, S$>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionServiceFactory",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-collection-service-factory.ts#L11-L30",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates EntityCollectionService instances for\na cached collection of T entities in the ngrx store.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/entity-services/entity-collection-service-factory.ts#L22-L29",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create an EntityCollectionService for an entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- name of the entity type",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(  entityName: string ): EntityCollectionService<T>;"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionServiceFactory {\n  create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(\n    entityName: string\n  ): EntityCollectionService<T>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionService",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-collection-service.ts#L14-L55",
        "signature": "interface EntityCollectionService<T> {\n  readonly dispatcher: EntityDispatcher<T>;\n  readonly entityName: string;\n  readonly selectors: EntitySelectors<T>;\n  readonly selectors$: EntitySelectors$<T>;\n\n  // inherited from EntityCommands\n\n  // inherited from EntitySelectors$\n  readonly entityName: string;\n  readonly collection$: Observable<EntityCollection> | Store<EntityCollection>;\n  readonly count$: Observable<number> | Store<number>;\n  readonly entities$: Observable<T[]> | Store<T[]>;\n  readonly entityActions$: Observable<EntityAction>;\n  readonly entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;\n  readonly errors$: Observable<EntityAction>;\n  readonly filter$: Observable<string> | Store<string>;\n  readonly filteredEntities$: Observable<T[]> | Store<T[]>;\n  readonly keys$: Observable<string[] | number[]> | Store<string[] | number[]>;\n  readonly loaded$: Observable<boolean> | Store<boolean>;\n  readonly loading$: Observable<boolean> | Store<boolean>;\n  readonly changeState$:\n    | Observable<ChangeStateMap<T>>\n    | Store<ChangeStateMap<T>>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A facade for managing\na cached collection of T entities in the ngrx store.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityServicesBase",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-services-base.ts#L36-L151",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base/default class of a central registry of EntityCollectionServices for all entity types.\nCreate your own subclass to add app-specific members for an improved developer experience.\n"
            }
          ],
          [
            "example",
            {
              "__kind": "heading",
              "description": "\nexport class EntityServices extends EntityServicesBase {\nconstructor(entityServicesElements: EntityServicesElements) {\nsuper(entityServicesElements);\n}\n// Extend with well-known, app entity collection services\n// Convenience property to return a typed custom entity collection service\nget companyService() {\nreturn this.getEntityCollectionService<Model.Company>('Company') as CompanyService;\n}\n// Convenience dispatch methods\nclearCompany(companyId: string) {\nthis.dispatch(new ClearCompanyAction(companyId));\n}\n}\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/data/src/entity-services/entity-services-base.ts#L80-L82",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "dispatch(action: Action);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getEntityCollectionService",
              "info": {
                "file": "modules/data/src/entity-services/entity-services-base.ts#L103-L113",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} Name of the entity type of the service",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getEntityCollectionService<  T,  S$ extends EntitySelectors$<T> = EntitySelectors$<T> >(entityName: string): EntityCollectionService<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionService",
              "info": {
                "file": "modules/data/src/entity-services/entity-services-base.ts#L120-L125",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "service",
                      "description": "{EntityCollectionService} The entity service",
                      "type": "EntityCollectionService<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "serviceName",
                      "description": "{string} optional service name to use instead of the service's entityName",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "registerEntityCollectionService<T>(  service: EntityCollectionService<T>,  serviceName?: string );"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionServices",
              "info": {
                "file": "modules/data/src/entity-services/entity-services-base.ts#L133-L150",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register entity services for several entity types at once.\nWill replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityCollectionServices",
                      "description": "{EntityCollectionServiceMap | EntityCollectionService<any>[]}",
                      "type": "EntityCollectionServiceMap | EntityCollectionService<any>[]"
                    }
                  ]
                ],
                "signature": "registerEntityCollectionServices(  entityCollectionServices:   | EntityCollectionServiceMap   | EntityCollectionService<any>[] ): void;"
              }
            }
          ]
        ],
        "signature": "class EntityServicesBase implements EntityServices {\n  dispatch(action: Action);\n  getEntityCollectionService<\n    T,\n    S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n  >(entityName: string): EntityCollectionService<T>;\n  registerEntityCollectionService<T>(\n    service: EntityCollectionService<T>,\n    serviceName?: string\n  );\n  registerEntityCollectionServices(\n    entityCollectionServices:\n      | EntityCollectionServiceMap\n      | EntityCollectionService<any>[]\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityServicesElements",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-services-elements.ts#L12-L43",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "entityActionErrors$",
              "type": "Observable<EntityAction<any>>",
              "description": "/** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityCache$",
              "type": "any",
              "description": "/** Observable of the entire entity cache */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reducedActions$",
              "type": "Observable<any>",
              "description": "/**\r\n   * Actions scanned by the store after it processed them with reducers.\r\n   * A replay observable of the most recent action reduced by the store.\r\n   */"
            }
          ]
        ],
        "signature": "class EntityServicesElements {\n  readonly entityActionErrors$: Observable<EntityAction>;\n  readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n  readonly reducedActions$: Observable<Action>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityServices",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-services.ts#L17-L67",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Class-Interface for EntityCache and EntityCollection services.\nServes as an Angular provider token for this service class.\nIncludes a registry of EntityCollectionServices for all entity types.\nCreates a new default EntityCollectionService for any entity type not in the registry.\nOptionally register specialized EntityCollectionServices for individual types\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L19-L19",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract dispatch(action: Action): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getEntityCollectionService",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L30-L32",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} Name of the entity type of the service",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getEntityCollectionService<T = any>(  entityName: string ): EntityCollectionService<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionService",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L46-L48",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "service",
                      "description": "{EntityCollectionService} The entity service",
                      "type": "EntityCollectionService<T>"
                    }
                  ]
                ],
                "signature": "abstract registerEntityCollectionService<T>(  service: EntityCollectionService<T> ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionServices",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L54-L56",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityCollectionServices",
                      "description": "Array of EntityCollectionServices to register",
                      "type": "EntityCollectionService<any>[]"
                    }
                  ]
                ],
                "signature": "abstract registerEntityCollectionServices(  entityCollectionServices: EntityCollectionService<any>[] ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionServices",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L62-L65",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityCollectionServiceMap",
                      "description": "Map of service-name to entity-collection-service",
                      "type": "EntityCollectionServiceMap"
                    }
                  ]
                ],
                "signature": "abstract registerEntityCollectionServices(  entityCollectionServiceMap: EntityCollectionServiceMap ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionServices",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L54-L56",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityCollectionServices",
                      "description": "Array of EntityCollectionServices to register",
                      "type": "EntityCollectionService<any>[]"
                    }
                  ]
                ],
                "signature": "abstract registerEntityCollectionServices(  entityCollectionServices: EntityCollectionService<any>[] ): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerEntityCollectionServices",
              "info": {
                "file": "modules/data/src/entity-services/entity-services.ts#L62-L65",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Will replace a pre-existing service for that type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityCollectionServiceMap",
                      "description": "Map of service-name to entity-collection-service",
                      "type": "EntityCollectionServiceMap"
                    }
                  ]
                ],
                "signature": "abstract registerEntityCollectionServices(  entityCollectionServiceMap: EntityCollectionServiceMap ): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityActionErrors$",
              "type": "Observable<EntityAction<any>>",
              "description": "/** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityCache$",
              "type": "any",
              "description": "/** Observable of the entire entity cache */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reducedActions$",
              "type": "Observable<any>",
              "description": "/**\r\n   * Actions scanned by the store after it processed them with reducers.\r\n   * A replay observable of the most recent Action (not just EntityAction) reduced by the store.\r\n   */"
            }
          ]
        ],
        "signature": "class EntityServices {\n  abstract readonly entityActionErrors$: Observable<EntityAction>;\n  abstract readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n  abstract readonly reducedActions$: Observable<Action>;\n\n  abstract dispatch(action: Action): void;\n  abstract getEntityCollectionService<T = any>(\n    entityName: string\n  ): EntityCollectionService<T>;\n  abstract registerEntityCollectionService<T>(\n    service: EntityCollectionService<T>\n  ): void;\n  abstract registerEntityCollectionServices(\n    entityCollectionServices: EntityCollectionService<any>[]\n  ): void;\n  abstract registerEntityCollectionServices(\n    entityCollectionServiceMap: EntityCollectionServiceMap\n  ): void;\n  abstract registerEntityCollectionServices(\n    entityCollectionServices: EntityCollectionService<any>[]\n  ): void;\n  abstract registerEntityCollectionServices(\n    entityCollectionServiceMap: EntityCollectionServiceMap\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionServiceMap",
    "overloads": [
      {
        "file": "modules/data/src/entity-services/entity-services.ts#L72-L74",
        "signature": "interface EntityCollectionServiceMap {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A map of service or entity names to their corresponding EntityCollectionServices.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_CACHE_NAME",
    "overloads": [
      {
        "file": "modules/data/src/reducers/constants.ts#L5-L5",
        "signature": "const ENTITY_CACHE_NAME: 'entityCache';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_CACHE_NAME_TOKEN",
    "overloads": [
      {
        "file": "modules/data/src/reducers/constants.ts#L6-L8",
        "signature": "const ENTITY_CACHE_NAME_TOKEN: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_CACHE_META_REDUCERS",
    "overloads": [
      {
        "file": "modules/data/src/reducers/constants.ts#L10-L12",
        "signature": "const ENTITY_CACHE_META_REDUCERS: InjectionToken<any[]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_COLLECTION_META_REDUCERS",
    "overloads": [
      {
        "file": "modules/data/src/reducers/constants.ts#L13-L15",
        "signature": "const ENTITY_COLLECTION_META_REDUCERS: InjectionToken<any[]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "INITIAL_ENTITY_CACHE_STATE",
    "overloads": [
      {
        "file": "modules/data/src/reducers/constants.ts#L17-L19",
        "signature": "const INITIAL_ENTITY_CACHE_STATE: InjectionToken<\n  EntityCache | (() => EntityCache)\n>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCacheReducerFactory",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-cache-reducer.ts#L33-L382",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates the EntityCacheReducer via its create() method\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/reducers/entity-cache-reducer.ts#L45-L117",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create the @ngrx/data entity cache reducer which either responds to entity cache level actions\nor (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.\n"
                    }
                  ]
                ],
                "signature": "create(): ActionReducer<EntityCache, Action>;"
              }
            }
          ]
        ],
        "signature": "class EntityCacheReducerFactory {\n  create(): ActionReducer<EntityCache, Action>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCache",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-cache.ts#L3-L6",
        "signature": "interface EntityCache {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityChangeTrackerBase",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L15-L741",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The default implementation of EntityChangeTracker with\nmethods for tracking, committing, and reverting/undoing unsaved entity changes.\nUsed by EntityCollectionReducerMethods which should call tracker methods BEFORE modifying the collection.\nSee EntityChangeTracker docs.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "commitAll",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L30-L34",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Commit all changes as when the collection has been completely reloaded from the server.\nHarmless when there are no entity changes to commit."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "commitAll(collection: EntityCollection<T>): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "commitMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L42-L66",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Commit changes for the given entities as when they have been refreshed from the server.\nHarmless when there are no entity changes to commit."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOrIdList",
                      "description": "The entities to clear tracking or their ids.",
                      "type": "(string | number | T)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "commitMany(  entityOrIdList: (number | string | T)[],  collection: EntityCollection<T> ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "commitOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L74-L81",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Commit changes for the given entity as when it have been refreshed from the server.\nHarmless when no entity changes to commit."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOrId",
                      "description": "The entity to clear tracking or its id.",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "commitOne(  entityOrId: number | string | T,  collection: EntityCollection<T> ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeQueryResults",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L94-L105",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merge query results into the collection, adjusting the ChangeState per the mergeStrategy."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "Entities returned from querying the server.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "How to merge a queried entity when the corresponding entity in the collection has an unsaved change.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The merged EntityCollection.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "mergeQueryResults(  entities: T[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeSaveAdds",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L118-L129",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merge result of saving new entities into the collection, adjusting the ChangeState per the mergeStrategy.\nThe default is MergeStrategy.OverwriteChanges."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "Entities returned from saving new entities to the server.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "How to merge a saved entity when the corresponding entity in the collection has an unsaved change.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The merged EntityCollection.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "mergeSaveAdds(  entities: T[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeSaveDeletes",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L140-L154",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merge successful result of deleting entities on the server that have the given primary keys\nClears the entity changeState for those keys unless the MergeStrategy is ignoreChanges."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "keys primary keys of the entities to remove/delete.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "How to adjust change tracking when the corresponding entity in the collection has an unsaved change.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The merged EntityCollection.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keys",
                      "description": "",
                      "type": "(string | number)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "mergeSaveDeletes(  keys: (number | string)[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeSaveUpdates",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L168-L263",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merge result of saving updated entities into the collection, adjusting the ChangeState per the mergeStrategy.\nThe default is MergeStrategy.OverwriteChanges."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "updateResponseData",
                      "description": "Entity response data returned from saving updated entities to the server.",
                      "type": "UpdateResponseData<T>[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "How to merge a saved entity when the corresponding entity in the collection has an unsaved change.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[skipUnchanged]",
                      "description": "True means skip update if server didn't change it. False by default.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The merged EntityCollection.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "skipUnchanged",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "mergeSaveUpdates(  updateResponseData: UpdateResponseData<T>[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy,  skipUnchanged = false ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "mergeSaveUpserts",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L274-L285",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merge result of saving upserted entities into the collection, adjusting the ChangeState per the mergeStrategy.\nThe default is MergeStrategy.OverwriteChanges."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "Entities returned from saving upserts to the server.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "How to merge a saved entity when the corresponding entity in the collection has an unsaved change.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The merged EntityCollection.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "mergeSaveUpserts(  entities: T[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackAddMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L370-L402",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track multiple entities before adding them to the collection.\nDoes NOT add to the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "The entities to add. They must all have their ids.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackAddMany(  entities: T[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackAddOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L412-L420",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track an entity before adding it to the collection.\nDoes NOT add to the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "The entity to add. It must have an id.",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackAddOne(  entity: T,  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackDeleteMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L429-L476",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track multiple entities before removing them with the intention of deleting them on the server.\nDoes NOT remove from the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keys",
                      "description": "The primary keys of the entities to delete.",
                      "type": "(string | number)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackDeleteMany(  keys: (number | string)[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackDeleteOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L485-L493",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track an entity before it is removed with the intention of deleting it on the server.\nDoes NOT remove from the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "The primary key of the entity to delete.",
                      "type": "string | number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackDeleteOne(  key: number | string,  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackUpdateMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L502-L540",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track multiple entities before updating them in the collection.\nDoes NOT update the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "updates",
                      "description": "The entities to update.",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackUpdateMany(  updates: Update<T>[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackUpdateOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L549-L557",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track an entity before updating it in the collection.\nDoes NOT update the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "update",
                      "description": "The entity to update.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackUpdateOne(  update: Update<T>,  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackUpsertMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L566-L604",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track multiple entities before upserting (adding and updating) them to the collection.\nDoes NOT update the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "The entities to add or update. They must be complete entities with ids.",
                      "type": "T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackUpsertMany(  entities: T[],  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "trackUpsertOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L613-L621",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Track an entity before upsert (adding and updating) it to the collection.\nDoes NOT update the collection (the reducer's job)."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entities",
                      "description": "The entity to add or update. It must be a complete entity with its id.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[mergeStrategy]",
                      "description": "Track by default. Don't track if is MergeStrategy.IgnoreChanges.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entity",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mergeStrategy",
                      "description": "",
                      "type": "MergeStrategy"
                    }
                  ]
                ],
                "signature": "trackUpsertOne(  entity: T,  collection: EntityCollection<T>,  mergeStrategy?: MergeStrategy ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "undoAll",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L630-L664",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Revert the unsaved changes for all collection.\nHarmless when there are no entity changes to undo."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "undoAll(collection: EntityCollection<T>): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "undoMany",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L672-L724",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Revert the unsaved changes for the given entities.\nHarmless when there are no entity changes to undo."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOrIdList",
                      "description": "The entities to revert or their ids.",
                      "type": "(string | number | T)[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "undoMany(  entityOrIdList: (number | string | T)[],  collection: EntityCollection<T> ): EntityCollection<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "undoOne",
              "info": {
                "file": "modules/data/src/reducers/entity-change-tracker-base.ts#L732-L739",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Revert the unsaved changes for the given entity.\nHarmless when there are no entity changes to undo."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityOrId",
                      "description": "The entity to revert or its id.",
                      "type": "string | number | T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "The entity collection",
                      "type": "EntityCollection<T>"
                    }
                  ]
                ],
                "signature": "undoOne(  entityOrId: number | string | T,  collection: EntityCollection<T> ): EntityCollection<T>;"
              }
            }
          ]
        ],
        "signature": "class EntityChangeTrackerBase<T> implements EntityChangeTracker<T> {\n  commitAll(collection: EntityCollection<T>): EntityCollection<T>;\n  commitMany(\n    entityOrIdList: (number | string | T)[],\n    collection: EntityCollection<T>\n  ): EntityCollection<T>;\n  commitOne(\n    entityOrId: number | string | T,\n    collection: EntityCollection<T>\n  ): EntityCollection<T>;\n  mergeQueryResults(\n    entities: T[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  mergeSaveAdds(\n    entities: T[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  mergeSaveDeletes(\n    keys: (number | string)[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  mergeSaveUpdates(\n    updateResponseData: UpdateResponseData<T>[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy,\n    skipUnchanged = false\n  ): EntityCollection<T>;\n  mergeSaveUpserts(\n    entities: T[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackAddMany(\n    entities: T[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackAddOne(\n    entity: T,\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackDeleteMany(\n    keys: (number | string)[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackDeleteOne(\n    key: number | string,\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackUpdateMany(\n    updates: Update<T>[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackUpdateOne(\n    update: Update<T>,\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackUpsertMany(\n    entities: T[],\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  trackUpsertOne(\n    entity: T,\n    collection: EntityCollection<T>,\n    mergeStrategy?: MergeStrategy\n  ): EntityCollection<T>;\n  undoAll(collection: EntityCollection<T>): EntityCollection<T>;\n  undoMany(\n    entityOrIdList: (number | string | T)[],\n    collection: EntityCollection<T>\n  ): EntityCollection<T>;\n  undoOne(\n    entityOrId: number | string | T,\n    collection: EntityCollection<T>\n  ): EntityCollection<T>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityChangeTracker",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-change-tracker.ts#L11-L262",
        "signature": "interface EntityChangeTracker<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Methods for tracking, committing, and reverting/undoing unsaved entity changes.\nUsed by EntityCollectionReducerMethods which should call tracker methods BEFORE modifying the collection.\nSee EntityChangeTracker docs.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionCreator",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-creator.ts#L6-L30",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-creator.ts#L16-L29",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create the default collection for an entity type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "{string} entity type name",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T = any, S extends EntityCollection<T> = EntityCollection<T>>(  entityName: string ): S;"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionCreator {\n  create<T = any, S extends EntityCollection<T> = EntityCollection<T>>(\n    entityName: string\n  ): S;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "createEmptyEntityCollection",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-creator.ts#L32-L44",
        "signature": "function createEmptyEntityCollection<T>(\n  entityName?: string\n): EntityCollection<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "entityName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionReducerMethodMap",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer-methods.ts#L24-L29",
        "signature": "interface EntityCollectionReducerMethodMap<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Map of {EntityOp} to reducer method for the operation.\nIf an operation is missing, caller should return the collection for that reducer.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionReducerMethods",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer-methods.ts#L34-L1221",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base implementation of reducer methods for an entity collection.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selectId",
              "type": "any",
              "description": "/** Extract the primary key (id); default to `id` */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityChangeTracker",
              "type": "EntityChangeTracker<T>",
              "description": "/**\r\n   * Track changes to entities since the last query or save\r\n   * Can revert some or all of those changes\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "methods",
              "type": "EntityCollectionReducerMethodMap<T>",
              "description": "/**\r\n   * Dictionary of the {EntityCollectionReducerMethods} for this entity type,\r\n   * keyed by the {EntityOp}\r\n   */"
            }
          ]
        ],
        "signature": "class EntityCollectionReducerMethods<T> {\n  selectId: IdSelector<T>;\n  entityChangeTracker: EntityChangeTracker<T>;\n  readonly methods: EntityCollectionReducerMethodMap<T> = {\n    [EntityOp.CANCEL_PERSIST]: this.cancelPersist.bind(this),\n\n    [EntityOp.QUERY_ALL]: this.queryAll.bind(this),\n    [EntityOp.QUERY_ALL_ERROR]: this.queryAllError.bind(this),\n    [EntityOp.QUERY_ALL_SUCCESS]: this.queryAllSuccess.bind(this),\n\n    [EntityOp.QUERY_BY_KEY]: this.queryByKey.bind(this),\n    [EntityOp.QUERY_BY_KEY_ERROR]: this.queryByKeyError.bind(this),\n    [EntityOp.QUERY_BY_KEY_SUCCESS]: this.queryByKeySuccess.bind(this),\n\n    [EntityOp.QUERY_LOAD]: this.queryLoad.bind(this),\n    [EntityOp.QUERY_LOAD_ERROR]: this.queryLoadError.bind(this),\n    [EntityOp.QUERY_LOAD_SUCCESS]: this.queryLoadSuccess.bind(this),\n\n    [EntityOp.QUERY_MANY]: this.queryMany.bind(this),\n    [EntityOp.QUERY_MANY_ERROR]: this.queryManyError.bind(this),\n    [EntityOp.QUERY_MANY_SUCCESS]: this.queryManySuccess.bind(this),\n\n    [EntityOp.SAVE_ADD_MANY]: this.saveAddMany.bind(this),\n    [EntityOp.SAVE_ADD_MANY_ERROR]: this.saveAddManyError.bind(this),\n    [EntityOp.SAVE_ADD_MANY_SUCCESS]: this.saveAddManySuccess.bind(this),\n\n    [EntityOp.SAVE_ADD_ONE]: this.saveAddOne.bind(this),\n    [EntityOp.SAVE_ADD_ONE_ERROR]: this.saveAddOneError.bind(this),\n    [EntityOp.SAVE_ADD_ONE_SUCCESS]: this.saveAddOneSuccess.bind(this),\n\n    [EntityOp.SAVE_DELETE_MANY]: this.saveDeleteMany.bind(this),\n    [EntityOp.SAVE_DELETE_MANY_ERROR]: this.saveDeleteManyError.bind(this),\n    [EntityOp.SAVE_DELETE_MANY_SUCCESS]: this.saveDeleteManySuccess.bind(this),\n\n    [EntityOp.SAVE_DELETE_ONE]: this.saveDeleteOne.bind(this),\n    [EntityOp.SAVE_DELETE_ONE_ERROR]: this.saveDeleteOneError.bind(this),\n    [EntityOp.SAVE_DELETE_ONE_SUCCESS]: this.saveDeleteOneSuccess.bind(this),\n\n    [EntityOp.SAVE_UPDATE_MANY]: this.saveUpdateMany.bind(this),\n    [EntityOp.SAVE_UPDATE_MANY_ERROR]: this.saveUpdateManyError.bind(this),\n    [EntityOp.SAVE_UPDATE_MANY_SUCCESS]: this.saveUpdateManySuccess.bind(this),\n\n    [EntityOp.SAVE_UPDATE_ONE]: this.saveUpdateOne.bind(this),\n    [EntityOp.SAVE_UPDATE_ONE_ERROR]: this.saveUpdateOneError.bind(this),\n    [EntityOp.SAVE_UPDATE_ONE_SUCCESS]: this.saveUpdateOneSuccess.bind(this),\n\n    [EntityOp.SAVE_UPSERT_MANY]: this.saveUpsertMany.bind(this),\n    [EntityOp.SAVE_UPSERT_MANY_ERROR]: this.saveUpsertManyError.bind(this),\n    [EntityOp.SAVE_UPSERT_MANY_SUCCESS]: this.saveUpsertManySuccess.bind(this),\n\n    [EntityOp.SAVE_UPSERT_ONE]: this.saveUpsertOne.bind(this),\n    [EntityOp.SAVE_UPSERT_ONE_ERROR]: this.saveUpsertOneError.bind(this),\n    [EntityOp.SAVE_UPSERT_ONE_SUCCESS]: this.saveUpsertOneSuccess.bind(this),\n\n    [EntityOp.ADD_ALL]: this.addAll.bind(this),\n    [EntityOp.ADD_MANY]: this.addMany.bind(this),\n    [EntityOp.ADD_ONE]: this.addOne.bind(this),\n\n    [EntityOp.REMOVE_ALL]: this.removeAll.bind(this),\n    [EntityOp.REMOVE_MANY]: this.removeMany.bind(this),\n    [EntityOp.REMOVE_ONE]: this.removeOne.bind(this),\n\n    [EntityOp.UPDATE_MANY]: this.updateMany.bind(this),\n    [EntityOp.UPDATE_ONE]: this.updateOne.bind(this),\n\n    [EntityOp.UPSERT_MANY]: this.upsertMany.bind(this),\n    [EntityOp.UPSERT_ONE]: this.upsertOne.bind(this),\n\n    [EntityOp.COMMIT_ALL]: this.commitAll.bind(this),\n    [EntityOp.COMMIT_MANY]: this.commitMany.bind(this),\n    [EntityOp.COMMIT_ONE]: this.commitOne.bind(this),\n    [EntityOp.UNDO_ALL]: this.undoAll.bind(this),\n    [EntityOp.UNDO_MANY]: this.undoMany.bind(this),\n    [EntityOp.UNDO_ONE]: this.undoOne.bind(this),\n\n    [EntityOp.SET_CHANGE_STATE]: this.setChangeState.bind(this),\n    [EntityOp.SET_COLLECTION]: this.setCollection.bind(this),\n    [EntityOp.SET_FILTER]: this.setFilter.bind(this),\n    [EntityOp.SET_LOADED]: this.setLoaded.bind(this),\n    [EntityOp.SET_LOADING]: this.setLoading.bind(this),\n  };\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionReducerMethodsFactory",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer-methods.ts#L1226-L1242",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates {EntityCollectionReducerMethods} for a given entity type.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-reducer-methods.ts#L1231-L1241",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T>(entityName: string): EntityCollectionReducerMethodMap<T>;"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionReducerMethodsFactory {\n  create<T>(entityName: string): EntityCollectionReducerMethodMap<T>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollectionReducers",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer-registry.ts#L13-L15",
        "signature": "interface EntityCollectionReducers {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionReducerRegistry",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer-registry.ts#L21-L89",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registry of entity types and their previously-constructed reducers.\nCan create a new CollectionReducer, which it registers for subsequent use.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getOrCreateReducer",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-reducer-registry.ts#L45-L56",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the registered EntityCollectionReducer<T> for this entity type or create one and register it."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "Name of the entity type for this reducer",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getOrCreateReducer<T>(entityName: string): EntityCollectionReducer<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerReducer",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-reducer-registry.ts#L67-L73",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register an EntityCollectionReducer for an entity type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- the name of the entity type",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducer",
                      "description": "- reducer for that entity type",
                      "type": "EntityCollectionReducer<T>"
                    }
                  ]
                ],
                "signature": "registerReducer<T>(  entityName: string,  reducer: EntityCollectionReducer<T> ): EntityCollectionReducer<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerReducers",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-reducer-registry.ts#L85-L88",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a batch of EntityCollectionReducers."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "- reducers to merge into existing reducers",
                      "type": "EntityCollectionReducers"
                    }
                  ]
                ],
                "signature": "registerReducers(reducers: EntityCollectionReducers);"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionReducerRegistry {\n  getOrCreateReducer<T>(entityName: string): EntityCollectionReducer<T>;\n  registerReducer<T>(\n    entityName: string,\n    reducer: EntityCollectionReducer<T>\n  ): EntityCollectionReducer<T>;\n  registerReducers(reducers: EntityCollectionReducers);\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "EntityCollectionReducer",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer.ts#L7-L10",
        "signature": "export type EntityCollectionReducer<T = any> = (\n  collection: EntityCollection<T>,\n  action: EntityAction\n) => EntityCollection<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityCollectionReducerFactory",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection-reducer.ts#L13-L30",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/reducers/entity-collection-reducer.ts#L18-L29",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T = any>(entityName: string): EntityCollectionReducer<T>;"
              }
            }
          ]
        ],
        "signature": "class EntityCollectionReducerFactory {\n  create<T = any>(entityName: string): EntityCollectionReducer<T>;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "data",
    "name": "ChangeType",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection.ts#L4-L13",
        "signature": "export enum ChangeType {\n  /** The entity has not changed from its last known server state. */\n  Unchanged = 0,\n  /** The entity was added to the collection */\n  Added,\n  /** The entity is scheduled for delete and was removed from the collection */\n  Deleted,\n  /** The entity in the collection was updated */\n  Updated,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "ChangeState",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection.ts#L19-L22",
        "signature": "interface ChangeState<T> {\n  changeType: ChangeType;\n  originalValue?: T | undefined;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Change state for an entity with unsaved changes;\nan entry in an EntityCollection.changeState map\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "ChangeStateMap",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection.ts#L28-L28",
        "signature": "export type ChangeStateMap<T> = Dictionary<ChangeState<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Map of entity primary keys to entity ChangeStates.\nEach entry represents an entity with unsaved changes.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityCollection",
    "overloads": [
      {
        "file": "modules/data/src/reducers/entity-collection.ts#L34-L45",
        "signature": "interface EntityCollection<T = any> {\n  entityName: string;\n  changeState: ChangeStateMap<T>;\n  filter?: string;\n  loaded: boolean;\n  loading: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Data and information about a collection of entities of a single type.\nEntityCollections are maintained in the EntityCache within the ngrx store.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "ENTITY_CACHE_SELECTOR_TOKEN",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-cache-selector.ts#L9-L11",
        "signature": "const ENTITY_CACHE_SELECTOR_TOKEN: InjectionToken<any>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "entityCacheSelectorProvider",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-cache-selector.ts#L13-L17",
        "signature": "const entityCacheSelectorProvider: FactoryProvider;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "data",
    "name": "EntityCacheSelector",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-cache-selector.ts#L19-L19",
        "signature": "export type EntityCacheSelector = MemoizedSelector<Object, EntityCache>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "createEntityCacheSelector",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-cache-selector.ts#L21-L26",
        "signature": "function createEntityCacheSelector(\n  entityCacheName?: string\n): MemoizedSelector<Object, EntityCache>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "entityCacheName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "CollectionSelectors",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-selectors.ts#L27-L56",
        "signature": "interface CollectionSelectors<T> {\n  readonly selectCount: Selector<EntityCollection<T>, number>;\n  readonly selectEntities: Selector<EntityCollection<T>, T[]>;\n  readonly selectEntityMap: Selector<EntityCollection<T>, Dictionary<T>>;\n  readonly selectFilter: Selector<EntityCollection<T>, string>;\n  readonly selectFilteredEntities: Selector<EntityCollection<T>, T[]>;\n  readonly selectKeys: Selector<EntityCollection<T>, string[] | number[]>;\n  readonly selectLoaded: Selector<EntityCollection<T>, boolean>;\n  readonly selectLoading: Selector<EntityCollection<T>, boolean>;\n  readonly selectChangeState: Selector<EntityCollection<T>, ChangeStateMap<T>>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The selector functions for entity collection members,\nSelects from the entity collection to the collection member\nContrast with {EntitySelectors}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntitySelectors",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-selectors.ts#L63-L101",
        "signature": "interface EntitySelectors<T> {\n  readonly entityName: string;\n  readonly selectCollection: MemoizedSelector<Object, EntityCollection<T>>;\n  readonly selectCount: MemoizedSelector<Object, number>;\n  readonly selectEntities: MemoizedSelector<Object, T[]>;\n  readonly selectEntityCache: MemoizedSelector<Object, EntityCache>;\n  readonly selectEntityMap: MemoizedSelector<Object, Dictionary<T>>;\n  readonly selectFilter: MemoizedSelector<Object, string>;\n  readonly selectFilteredEntities: MemoizedSelector<Object, T[]>;\n  readonly selectKeys: MemoizedSelector<Object, string[] | number[]>;\n  readonly selectLoaded: MemoizedSelector<Object, boolean>;\n  readonly selectLoading: MemoizedSelector<Object, boolean>;\n  readonly selectChangeState: MemoizedSelector<Object, ChangeStateMap<T>>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The selector functions for entity collection members,\nSelects from store root, through EntityCache, to the entity collection member\nContrast with {CollectionSelectors}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntitySelectorsFactory",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-selectors.ts#L104-L302",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "createCollectionSelector",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L126-L136",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Create the NgRx selector from the store root to the named collection,\ne.g. from Object to Heroes."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "the name of the collection",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "createCollectionSelector<  T = any,  C extends EntityCollection<T> = EntityCollection<T> >(entityName: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createCollectionSelectors",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L167-L233",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadataOrName",
                      "description": "",
                      "type": "string | EntityMetadata<T, {}>"
                    }
                  ]
                ],
                "signature": "createCollectionSelectors<  T,  S extends CollectionSelectors<T> = CollectionSelectors<T> >(metadataOrName: EntityMetadata<T> | string): S;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createCollectionSelectors",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L149-L152",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates entity collection selectors from metadata."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadata",
                      "description": "- EntityMetadata for the collection.",
                      "type": "EntityMetadata<T, {}>"
                    }
                  ]
                ],
                "signature": "createCollectionSelectors<  T,  S extends CollectionSelectors<T> = CollectionSelectors<T> >(metadata: EntityMetadata<T>): S;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createCollectionSelectors",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L161-L164",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates default entity collection selectors for an entity type.\nUse the metadata overload for additional collection selectors."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- name of the entity type",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "createCollectionSelectors<  T,  S extends CollectionSelectors<T> = CollectionSelectors<T> >(entityName: string): S;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L271-L301",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadataOrName",
                      "description": "",
                      "type": "string | EntityMetadata<T, {}>"
                    }
                  ]
                ],
                "signature": "create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(  metadataOrName: EntityMetadata<T> | string ): S;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L249-L251",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates the store-rooted selectors for an entity collection.\n{EntitySelectors$Factory} turns them into selectors$.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metadata",
                      "description": "- EntityMetadata for the collection.",
                      "type": "EntityMetadata<T, {}>"
                    }
                  ]
                ],
                "signature": "create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(  metadata: EntityMetadata<T> ): S;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors.ts#L265-L268",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates the default store-rooted selectors for an entity collection.\n{EntitySelectors$Factory} turns them into selectors$.\nUse the metadata overload for additional collection selectors.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- name of the entity type.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(  entityName: string ): S;"
              }
            }
          ]
        ],
        "signature": "class EntitySelectorsFactory {\n  createCollectionSelector<\n    T = any,\n    C extends EntityCollection<T> = EntityCollection<T>\n  >(entityName: string);\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(metadataOrName: EntityMetadata<T> | string): S;\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(metadata: EntityMetadata<T>): S;\n  createCollectionSelectors<\n    T,\n    S extends CollectionSelectors<T> = CollectionSelectors<T>\n  >(entityName: string): S;\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    metadataOrName: EntityMetadata<T> | string\n  ): S;\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    metadata: EntityMetadata<T>\n  ): S;\n  create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(\n    entityName: string\n  ): S;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntitySelectors$",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-selectors$.ts#L26-L70",
        "signature": "interface EntitySelectors$<T> {\n  readonly entityName: string;\n  readonly collection$: Observable<EntityCollection> | Store<EntityCollection>;\n  readonly count$: Observable<number> | Store<number>;\n  readonly entities$: Observable<T[]> | Store<T[]>;\n  readonly entityActions$: Observable<EntityAction>;\n  readonly entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;\n  readonly errors$: Observable<EntityAction>;\n  readonly filter$: Observable<string> | Store<string>;\n  readonly filteredEntities$: Observable<T[]> | Store<T[]>;\n  readonly keys$: Observable<string[] | number[]> | Store<string[] | number[]>;\n  readonly loaded$: Observable<boolean> | Store<boolean>;\n  readonly loading$: Observable<boolean> | Store<boolean>;\n  readonly changeState$:\n    | Observable<ChangeStateMap<T>>\n    | Store<ChangeStateMap<T>>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The selector observable functions for entity collection members.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntitySelectors$Factory",
    "overloads": [
      {
        "file": "modules/data/src/selectors/entity-selectors$.ts#L73-L128",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "modules/data/src/selectors/entity-selectors$.ts#L106-L127",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an entity collection's selectors$ observables for this factory's store.\n`selectors$` are observable selectors of the cached entity collection."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entityName",
                      "description": "- is also the name of the collection.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selectors",
                      "description": "- selector functions for this collection.",
                      "type": "EntitySelectors<T>"
                    }
                  ]
                ],
                "signature": "create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(  entityName: string,  selectors: EntitySelectors<T> ): S$;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityCache$",
              "type": "Observable<EntityCache>",
              "description": "/** Observable of the EntityCache */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entityActionErrors$",
              "type": "Observable<EntityAction<any>>",
              "description": "/** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */"
            }
          ]
        ],
        "signature": "class EntitySelectors$Factory {\n  entityCache$: Observable<EntityCache>;\n  entityActionErrors$: Observable<EntityAction>;\n\n  create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(\n    entityName: string,\n    selectors: EntitySelectors<T>\n  ): S$;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "CorrelationIdGenerator",
    "overloads": [
      {
        "file": "modules/data/src/utils/correlation-id-generator.ts#L12-L23",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates a string id beginning 'CRID',\nfollowed by a monotonically increasing integer for use as a correlation id.\nAs they are produced locally by a singleton service,\nthese ids are guaranteed to be unique only\nfor the duration of a single client browser instance.\nNgrx entity dispatcher query and save methods call this service to generate default correlation ids.\nDo NOT use for entity keys.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "modules/data/src/utils/correlation-id-generator.ts#L19-L22",
                "info": [],
                "signature": "next();"
              }
            }
          ]
        ],
        "signature": "class CorrelationIdGenerator {\n  next();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultLogger",
    "overloads": [
      {
        "file": "modules/data/src/utils/default-logger.ts#L4-L23",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "modules/data/src/utils/default-logger.ts#L6-L10",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extra",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(message?: any, extra?: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "modules/data/src/utils/default-logger.ts#L12-L16",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extra",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "log(message?: any, extra?: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "warn",
              "info": {
                "file": "modules/data/src/utils/default-logger.ts#L18-L22",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extra",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "warn(message?: any, extra?: any);"
              }
            }
          ]
        ],
        "signature": "class DefaultLogger implements Logger {\n  error(message?: any, extra?: any);\n  log(message?: any, extra?: any);\n  warn(message?: any, extra?: any);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "DefaultPluralizer",
    "overloads": [
      {
        "file": "modules/data/src/utils/default-pluralizer.ts#L17-L65",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "pluralize",
              "info": {
                "file": "modules/data/src/utils/default-pluralizer.ts#L36-L56",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Pluralize a singular name using common English language pluralization rules\nExamples: \"company\" -> \"companies\", \"employee\" -> \"employees\", \"tax\" -> \"taxes\"\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "pluralize(name: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerPluralNames",
              "info": {
                "file": "modules/data/src/utils/default-pluralizer.ts#L62-L64",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a mapping of entity type name to the entity name's plural"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pluralNames",
                      "description": "{EntityPluralNames} plural names for entity types",
                      "type": "EntityPluralNames"
                    }
                  ]
                ],
                "signature": "registerPluralNames(pluralNames: EntityPluralNames): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pluralNames",
              "type": "EntityPluralNames",
              "description": ""
            }
          ]
        ],
        "signature": "class DefaultPluralizer {\n  pluralNames: EntityPluralNames = {};\n\n  pluralize(name: string);\n  registerPluralNames(pluralNames: EntityPluralNames): void;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "getGuid",
    "overloads": [
      {
        "file": "modules/data/src/utils/guid-fns.ts#L30-L32",
        "signature": "function getGuid();",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "getGuidComb",
    "overloads": [
      {
        "file": "modules/data/src/utils/guid-fns.ts#L42-L64",
        "signature": "function getGuidComb(seed?: number);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a sortable, pseudo-GUID (globally unique identifier)\nwhose trailing 6 bytes (12 hex digits) are time-based\nStart either with the given getTime() value, seedTime,\nor get the current time in ms.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "{number} - optional seed for reproducible time-part",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "guidComparer",
    "overloads": [
      {
        "file": "modules/data/src/utils/guid-fns.ts#L67-L77",
        "signature": "function guidComparer(l: string, r: string);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "l",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "r",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "Logger",
    "overloads": [
      {
        "file": "modules/data/src/utils/interfaces.ts#L3-L7",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "modules/data/src/utils/interfaces.ts#L4-L4",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "optionalParams",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "abstract error(message?: any, ...optionalParams: any[]): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "modules/data/src/utils/interfaces.ts#L5-L5",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "optionalParams",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "abstract log(message?: any, ...optionalParams: any[]): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "warn",
              "info": {
                "file": "modules/data/src/utils/interfaces.ts#L6-L6",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "optionalParams",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "abstract warn(message?: any, ...optionalParams: any[]): void;"
              }
            }
          ]
        ],
        "signature": "class Logger {\n  abstract error(message?: any, ...optionalParams: any[]): void;\n  abstract log(message?: any, ...optionalParams: any[]): void;\n  abstract warn(message?: any, ...optionalParams: any[]): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityPluralNames",
    "overloads": [
      {
        "file": "modules/data/src/utils/interfaces.ts#L12-L14",
        "signature": "interface EntityPluralNames {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mapping of entity type name to its plural\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "data",
    "name": "PLURAL_NAMES_TOKEN",
    "overloads": [
      {
        "file": "modules/data/src/utils/interfaces.ts#L16-L18",
        "signature": "const PLURAL_NAMES_TOKEN: InjectionToken<EntityPluralNames>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "Pluralizer",
    "overloads": [
      {
        "file": "modules/data/src/utils/interfaces.ts#L20-L22",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "pluralize",
              "info": {
                "file": "modules/data/src/utils/interfaces.ts#L21-L21",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract pluralize(name: string): string;"
              }
            }
          ]
        ],
        "signature": "class Pluralizer {\n  abstract pluralize(name: string): string;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "defaultSelectId",
    "overloads": [
      {
        "file": "modules/data/src/utils/utilities.ts#L9-L11",
        "signature": "function defaultSelectId(entity: any);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Default function that returns the entity's primary key (pkey).\nAssumes that the entity has an `id` pkey property.\nReturns `undefined` if no entity or `id`.\nEvery selectId fn must return `undefined` when it cannot produce a full pkey.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "entity",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "flattenArgs",
    "overloads": [
      {
        "file": "modules/data/src/utils/utilities.ts#L24-L33",
        "signature": "function flattenArgs<T>(args?: any[]): T[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Flatten first arg if it is an array\nAllows fn with ...rest signature to be called with an array instead of spread\nExample:\n```\n// See entity-action-operators.ts\nconst persistOps = [EntityOp.QUERY_ALL, EntityOp.ADD, ...];\nactions.pipe(ofEntityOp(...persistOps)) // works\nactions.pipe(ofEntityOp(persistOps)) // also works\n```\n*/"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "data",
    "name": "toUpdateFactory",
    "overloads": [
      {
        "file": "modules/data/src/utils/utilities.ts#L40-L55",
        "signature": "function toUpdateFactory<T>(selectId?: IdSelector<T>);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Return a function that converts an entity (or partial entity) into the `Update<T>`\nwhose `id` is the primary key and\n`changes` is the entity (or partial entity of changes).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selectId",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "data",
    "name": "EntityDataModuleConfig",
    "overloads": [
      {
        "file": "modules/data/src/entity-data-without-effects.module.ts#L53-L63",
        "signature": "interface EntityDataModuleConfig {\n  entityMetadata?: EntityMetadataMap;\n  entityCacheMetaReducers?: (\n    | MetaReducer<EntityCache, Action>\n    | InjectionToken<MetaReducer<EntityCache, Action>>\n  )[];\n  entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[];\n  initialEntityCacheState?: EntityCache | (() => EntityCache);\n  pluralNames?: { [name: string]: string };\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDataModuleWithoutEffects",
    "overloads": [
      {
        "file": "modules/data/src/entity-data-without-effects.module.ts#L71-L172",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Module without effects or dataservices which means no HTTP calls\nThis module helpful for internal testing.\nAlso helpful for apps that handle server access on their own and\ntherefore opt-out of @ngrx/effects for entities\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/data/src/entity-data-without-effects.module.ts#L101-L126",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "EntityDataModuleConfig"
                    }
                  ]
                ],
                "signature": "static forRoot(  config: EntityDataModuleConfig ): ModuleWithProviders<EntityDataModuleWithoutEffects>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/data/src/entity-data-without-effects.module.ts#L169-L171",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class EntityDataModuleWithoutEffects implements OnDestroy {\n  static forRoot(\n    config: EntityDataModuleConfig\n  ): ModuleWithProviders<EntityDataModuleWithoutEffects>;\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "data",
    "name": "EntityDataModule",
    "overloads": [
      {
        "file": "modules/data/src/entity-data.module.ts#L41-L122",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "entity-data main module includes effects and HTTP data services\nConfigure with `forRoot`.\nNo `forFeature` yet.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/data/src/entity-data.module.ts#L61-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "EntityDataModuleConfig"
                    }
                  ]
                ],
                "signature": "static forRoot(  config: EntityDataModuleConfig ): ModuleWithProviders<EntityDataModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEffects",
              "info": {
                "file": "modules/data/src/entity-data.module.ts#L119-L121",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add another class instance that contains effects."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "effectSourceInstance",
                      "description": "a class instance that implements effects.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "addEffects(effectSourceInstance: any);"
              }
            }
          ]
        ],
        "signature": "class EntityDataModule {\n  static forRoot(\n    config: EntityDataModuleConfig\n  ): ModuleWithProviders<EntityDataModule>;\n  addEffects(effectSourceInstance: any);\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "createEffect",
    "overloads": [
      {
        "file": "modules/effects/src/effect_creator.ts#L54-L72",
        "signature": "function createEffect<\n  C extends EffectConfig,\n  DT extends DispatchType<C>,\n  OT extends ObservableType<DT, OT>,\n  R extends EffectResult<OT>\n>(\n  source: () => R & ConditionallyDisallowActionCreator<DT, R>,\n  config?: Partial<C>\n): R & CreateEffectMetadata;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates an effect from an `Observable` and an `EffectConfig`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "source",
              "description": "A function which returns an `Observable`.",
              "type": "() => R & ConditionallyDisallowActionCreator<DT, R>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.",
              "type": "Partial<C>"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n** Mapping to a different action **\n```ts\neffectName$ = createEffect(\n() => this.actions$.pipe(\nofType(FeatureActions.actionOne),\nmap(() => FeatureActions.actionTwo())\n)\n);\n```\n\n** Non-dispatching effects **\n```ts\neffectName$ = createEffect(\n() => this.actions$.pipe(\nofType(FeatureActions.actionOne),\ntap(() => console.log('Action One Dispatched'))\n),\n{ dispatch: false }\n// FeatureActions.actionOne is not dispatched\n);\n```\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "EffectConfig",
    "overloads": [
      {
        "file": "modules/effects/src/models.ts#L4-L14",
        "signature": "interface EffectConfig {\n  dispatch?: boolean;\n  useEffectsErrorHandler?: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures an effect created by `createEffect`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "Effect",
    "overloads": [
      {
        "file": "modules/effects/src/effect_decorator.ts#L13-L25",
        "signature": "function Effect(config: EffectConfig = {});",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "EffectConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "getEffectsMetadata",
    "overloads": [
      {
        "file": "modules/effects/src/effects_metadata.ts#L5-L16",
        "signature": "function getEffectsMetadata<T>(instance: T): EffectsMetadata<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "instance",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "mergeEffects",
    "overloads": [
      {
        "file": "modules/effects/src/effects_resolver.ts#L11-L54",
        "signature": "function mergeEffects(\n  sourceInstance: any,\n  globalErrorHandler: ErrorHandler,\n  effectsErrorHandler: EffectsErrorHandler\n): Observable<EffectNotification>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sourceInstance",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "globalErrorHandler",
              "description": "",
              "type": "ErrorHandler"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "effectsErrorHandler",
              "description": "",
              "type": "EffectsErrorHandler"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "effects",
    "name": "EffectsErrorHandler",
    "overloads": [
      {
        "file": "modules/effects/src/effects_error_handler.ts#L6-L9",
        "signature": "export type EffectsErrorHandler = <T extends Action>(\n  observable$: Observable<T>,\n  errorHandler: ErrorHandler\n) => Observable<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "defaultEffectsErrorHandler",
    "overloads": [
      {
        "file": "modules/effects/src/effects_error_handler.ts#L13-L32",
        "signature": "function defaultEffectsErrorHandler<T extends Action>(\n  observable$: Observable<T>,\n  errorHandler: ErrorHandler,\n  retryAttemptLeft: number = MAX_NUMBER_OF_RETRY_ATTEMPTS\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable$",
              "description": "",
              "type": "Observable<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorHandler",
              "description": "",
              "type": "ErrorHandler"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "retryAttemptLeft",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "effects",
    "name": "EffectsMetadata",
    "overloads": [
      {
        "file": "modules/effects/src/models.ts#L37-L39",
        "signature": "export type EffectsMetadata<T> = {\n  [key in EffectPropertyKey<T>]?: EffectConfig;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "CreateEffectMetadata",
    "overloads": [
      {
        "file": "modules/effects/src/models.ts#L23-L25",
        "signature": "interface CreateEffectMetadata {\n  [CREATE_EFFECT_METADATA_KEY]: EffectConfig;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "Actions",
    "overloads": [
      {
        "file": "modules/effects/src/actions.ts#L11-L27",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "lift",
              "info": {
                "file": "modules/effects/src/actions.ts#L21-L26",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operator",
                      "description": "",
                      "type": "Operator<V, R>"
                    }
                  ]
                ],
                "signature": "lift<R>(operator: Operator<V, R>): Observable<R>;"
              }
            }
          ]
        ],
        "signature": "class Actions<V = Action> extends Observable<V> {\n  lift<R>(operator: Operator<V, R>): Observable<R>;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "ofType",
    "overloads": [
      {
        "file": "modules/effects/src/actions.ts#L119-L133",
        "signature": "function ofType(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, Action>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedTypes",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L57-L61",
        "signature": "function ofType<\n  AC extends ActionCreator<string, Creator>[],\n  U extends Action = Action,\n  V = ReturnType<AC[number]>\n>(...allowedTypes: AC): OperatorFunction<U, V>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "'ofType' filters an Observable of Actions into an observable of the actions\nwhose type strings are passed to it.\n\nFor example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\nthe type of the `Addition` action is `add`, then\n`actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n\nProperly typing this function is hard and requires some advanced TS tricks\nbelow.\n\nType narrowing automatically works, as long as your `actions` object\nstarts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n\nFor backwards compatibility, when one passes a single type argument\n`ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\ncompletely overrides any possible inference from 'something'.\n\nUnfortunately, for unknown 'actions: Actions' these types will produce\n'Observable<never>'. In such cases one has to manually set the generic type\nlike `actions.ofType<AdditionAction>('add')`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedTypes",
              "description": "",
              "type": "AC"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L63-L69",
        "signature": "function ofType<\n  E extends Extract<U, { type: T1 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  U extends Action = Action,\n  V = T1 extends string ? E : ReturnType<Extract<T1, AC>>\n>(t1: T1): OperatorFunction<U, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "t1",
              "description": "",
              "type": "T1"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L70-L77",
        "signature": "function ofType<\n  E extends Extract<U, { type: T1 | T2 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2, AC, E>\n>(t1: T1, t2: T2): OperatorFunction<U, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "t1",
              "description": "",
              "type": "T1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t2",
              "description": "",
              "type": "T2"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L78-L86",
        "signature": "function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3, AC, E>\n>(t1: T1, t2: T2, t3: T3): OperatorFunction<U, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "t1",
              "description": "",
              "type": "T1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t2",
              "description": "",
              "type": "T2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t3",
              "description": "",
              "type": "T3"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L87-L96",
        "signature": "function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4): OperatorFunction<U, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "t1",
              "description": "",
              "type": "T1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t2",
              "description": "",
              "type": "T2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t3",
              "description": "",
              "type": "T3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t4",
              "description": "",
              "type": "T4"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L97-L107",
        "signature": "function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 | T5 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  T5 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4 | T5, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): OperatorFunction<U, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "t1",
              "description": "",
              "type": "T1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t2",
              "description": "",
              "type": "T2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t3",
              "description": "",
              "type": "T3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t4",
              "description": "",
              "type": "T4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "t5",
              "description": "",
              "type": "T5"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/actions.ts#L116-L118",
        "signature": "function ofType<V extends Action>(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, V>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Fallback for more than 5 arguments.\nThere is no inference, so the return type is the same as the input -\nObservable<Action>.\n\nWe provide a type parameter, even though TS will not infer it from the\narguments, to preserve backwards compatibility with old versions of ngrx.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowedTypes",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "EffectsModule",
    "overloads": [
      {
        "file": "modules/effects/src/effects_module.ts#L25-L90",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "forFeature",
              "info": {
                "file": "modules/effects/src/effects_module.ts#L27-L52",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureEffects",
                      "description": "",
                      "type": "Type<any>[]"
                    }
                  ]
                ],
                "signature": "static forFeature(  featureEffects: Type<any>[] = [] ): ModuleWithProviders<EffectsFeatureModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/effects/src/effects_module.ts#L54-L89",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootEffects",
                      "description": "",
                      "type": "Type<any>[]"
                    }
                  ]
                ],
                "signature": "static forRoot(  rootEffects: Type<any>[] = [] ): ModuleWithProviders<EffectsRootModule>;"
              }
            }
          ]
        ],
        "signature": "class EffectsModule {\n  static forFeature(\n    featureEffects: Type<any>[] = []\n  ): ModuleWithProviders<EffectsFeatureModule>;\n  static forRoot(\n    rootEffects: Type<any>[] = []\n  ): ModuleWithProviders<EffectsRootModule>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "EffectSources",
    "overloads": [
      {
        "file": "modules/effects/src/effect_sources.ts#L32-L86",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "addEffects",
              "info": {
                "file": "modules/effects/src/effect_sources.ts#L42-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "effectSourceInstance",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "addEffects(effectSourceInstance: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toActions",
              "info": {
                "file": "modules/effects/src/effect_sources.ts#L49-L85",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }]
                ],
                "signature": "toActions(): Observable<Action>;"
              }
            }
          ]
        ],
        "signature": "class EffectSources extends Subject<any> {\n  addEffects(effectSourceInstance: any): void;\n  toActions(): Observable<Action>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "EffectsRunner",
    "overloads": [
      {
        "file": "modules/effects/src/effects_runner.ts#L7-L30",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "start",
              "info": {
                "file": "modules/effects/src/effects_runner.ts#L16-L22",
                "info": [],
                "signature": "start();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/effects/src/effects_runner.ts#L24-L29",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class EffectsRunner implements OnDestroy {\n  start();\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "EffectNotification",
    "overloads": [
      {
        "file": "modules/effects/src/effect_notification.ts#L5-L11",
        "signature": "interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: PropertyKey;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "EffectsFeatureModule",
    "overloads": [
      {
        "file": "modules/effects/src/effects_feature_module.ts#L6-L20",
        "info": [],
        "signature": "class EffectsFeatureModule {}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "effects",
    "name": "ROOT_EFFECTS_INIT",
    "overloads": [
      {
        "file": "modules/effects/src/effects_root_module.ts#L13-L13",
        "signature": "const ROOT_EFFECTS_INIT: '@ngrx/effects/init';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "effects",
    "name": "rootEffectsInit",
    "overloads": [
      {
        "file": "modules/effects/src/effects_root_module.ts#L14-L14",
        "signature": "const rootEffectsInit: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "effects",
    "name": "EffectsRootModule",
    "overloads": [
      {
        "file": "modules/effects/src/effects_root_module.ts#L16-L41",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "addEffects",
              "info": {
                "file": "modules/effects/src/effects_root_module.ts#L38-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "effectSourceInstance",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "addEffects(effectSourceInstance: any);"
              }
            }
          ]
        ],
        "signature": "class EffectsRootModule {\n  addEffects(effectSourceInstance: any);\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "effects",
    "name": "EFFECTS_ERROR_HANDLER",
    "overloads": [
      {
        "file": "modules/effects/src/tokens.ts#L25-L27",
        "signature": "const EFFECTS_ERROR_HANDLER: InjectionToken<EffectsErrorHandler>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "effects",
    "name": "act",
    "overloads": [
      {
        "file": "modules/effects/src/act.ts#L79-L171",
        "signature": "function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  /** Allow to take either config object or project/error functions */\n  configOrProject:\n    | ActConfig<\n        Input,\n        OutputAction,\n        ErrorAction,\n        CompleteAction,\n        UnsubscribeAction\n      >\n    | ((input: Input, index: number) => Observable<OutputAction>),\n  errorFn?: (error: any, input: Input) => ErrorAction\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "configOrProject",
              "description": "",
              "type": "ActConfig<Input, OutputAction, ErrorAction, CompleteAction, UnsubscribeAction> | ((input: Input, index: number) => Observable<OutputAction>)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorFn",
              "description": "",
              "type": "(error: any, input: Input) => ErrorAction"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/act.ts#L52-L59",
        "signature": "function act<Input, OutputAction extends Action, ErrorAction extends Action>(\n  project: (input: Input, index: number) => Observable<OutputAction>,\n  error: (error: any, input: Input) => ErrorAction\n): (source: Observable<Input>) => Observable<OutputAction | ErrorAction>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Wraps project fn with error handling making it safe to use in Effects.\nTakes either config with named properties that represent different possible\ncallbacks or project/error callbacks that are required.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(input: Input, index: number) => Observable<OutputAction>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "(error: any, input: Input) => ErrorAction"
            }
          ]
        ]
      },
      {
        "file": "modules/effects/src/act.ts#L60-L78",
        "signature": "function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  config: ActConfig<\n    Input,\n    OutputAction,\n    ErrorAction,\n    CompleteAction,\n    UnsubscribeAction\n  >\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "ActConfig<Input, OutputAction, ErrorAction, CompleteAction, UnsubscribeAction>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "OnIdentifyEffects",
    "overloads": [
      {
        "file": "modules/effects/src/lifecycle_hooks.ts#L29-L35",
        "signature": "interface OnIdentifyEffects {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nInterface to set an identifier for effect instances.\n\nBy default, each Effects class is registered\nonce regardless of how many times the Effect class\nis loaded. By implementing this interface, you define\na unique identifier to register an Effects class instance\nmultiple times.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Set an identifier for an Effects class\n\n```ts\nclass EffectWithIdentifier implements OnIdentifyEffects {\nconstructor(private effectIdentifier: string) {}\n\nngrxOnIdentifyEffects() {\nreturn this.effectIdentifier;\n}\n\n```\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "OnRunEffects",
    "overloads": [
      {
        "file": "modules/effects/src/lifecycle_hooks.ts#L73-L81",
        "signature": "interface OnRunEffects {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nInterface to control the lifecycle of effects.\n\nBy default, effects are merged and subscribed to the store. Implement the OnRunEffects interface to control the lifecycle of the resolved effects.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Implement the OnRunEffects interface on an Effects class\n\n```ts\nexport class UserEffects implements OnRunEffects {\nconstructor(private actions$: Actions) {}\n\nngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {\nreturn this.actions$.pipe(\nofType('LOGGED_IN'),\nexhaustMap(() =>\nresolvedEffects$.pipe(\ntakeUntil(this.actions$.pipe(ofType('LOGGED_OUT')))\n)\n)\n);\n}\n}\n```\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "effects",
    "name": "OnInitEffects",
    "overloads": [
      {
        "file": "modules/effects/src/lifecycle_hooks.ts#L109-L115",
        "signature": "interface OnInitEffects {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nInterface to dispatch an action after effect registration.\n\nImplement this interface to dispatch a custom action after\nthe effect has been added. You can listen to this action\nin the rest of the application to execute something after\nthe effect is registered.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Set an identifier for an Effects class\n\n```ts\nclass EffectWithInitAction implements OnInitEffects {\nngrxOnInitEffects() {\nreturn { type: '[EffectWithInitAction] Init' };\n}\n```\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "effects",
    "name": "USER_PROVIDED_EFFECTS",
    "overloads": [
      {
        "file": "modules/effects/src/tokens.ts#L10-L12",
        "signature": "const USER_PROVIDED_EFFECTS: InjectionToken<Type<any>[][]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "entity",
    "name": "createEntityAdapter",
    "overloads": [
      {
        "file": "modules/entity/src/create_adapter.ts#L13-L38",
        "signature": "function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "{ selectId?: IdSelector<T>; sortComparer?: false | Comparer<T>; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "entity",
    "name": "Dictionary",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L12-L14",
        "info": [],
        "signature": "class Dictionary<T> implements DictionaryNum<T> {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "entity",
    "name": "EntityState",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L44-L47",
        "signature": "interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "entity",
    "name": "EntityAdapter",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L90-L99",
        "signature": "interface EntityAdapter<T> {\n  selectId: IdSelector<T>;\n  sortComparer: false | Comparer<T>;\n\n  // inherited from EntityStateAdapter\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "Update",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L26-L26",
        "signature": "export type Update<T> = UpdateStr<T> | UpdateNum<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "EntityMap",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L30-L30",
        "signature": "export type EntityMap<T> = (entity: T) => T;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "EntityMapOne",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L42-L42",
        "signature": "export type EntityMapOne<T> = EntityMapOneNum<T> | EntityMapOneStr<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "Predicate",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L28-L28",
        "signature": "export type Predicate<T> = (entity: T) => boolean;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "IdSelector",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L6-L6",
        "signature": "export type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "entity",
    "name": "Comparer",
    "overloads": [
      {
        "file": "modules/entity/src/models.ts#L1-L1",
        "signature": "export type Comparer<T> = (a: T, b: T) => number;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_ERROR",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L108-L108",
        "signature": "const ROUTER_ERROR: '@ngrx/router-store/error';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_CANCEL",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L75-L75",
        "signature": "const ROUTER_CANCEL: '@ngrx/router-store/cancel';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_NAVIGATION",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L45-L45",
        "signature": "const ROUTER_NAVIGATION: '@ngrx/router-store/navigation';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_NAVIGATED",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L141-L141",
        "signature": "const ROUTER_NAVIGATED: '@ngrx/router-store/navigated';",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_REQUEST",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L16-L16",
        "signature": "const ROUTER_REQUEST: '@ngrx/router-store/request';",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L171-L179",
        "signature": "export type RouterAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> =\n  | RouterRequestAction<V>\n  | RouterNavigationAction<V>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>\n  | RouterNavigatedAction<V>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A union type of router actions.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterCancelAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L92-L98",
        "signature": "export type RouterCancelAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An action dispatched when the router cancels navigation.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterCancelPayload",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L80-L87",
        "signature": "export type RouterCancelPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Payload of ROUTER_CANCEL.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterErrorAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L125-L131",
        "signature": "export type RouterErrorAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An action dispatched when the router errors.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterErrorPayload",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L113-L120",
        "signature": "export type RouterErrorPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "Payload of ROUTER_ERROR.\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterNavigatedAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L156-L161",
        "signature": "export type RouterNavigatedAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATED;\n  payload: RouterNavigatedPayload<T>;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An action dispatched after navigation has ended and new route is active.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterNavigatedPayload",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L146-L151",
        "signature": "export type RouterNavigatedPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationEnd;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Payload of ROUTER_NAVIGATED.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterNavigationAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L60-L65",
        "signature": "export type RouterNavigationAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An action dispatched when the router navigates.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterNavigationPayload",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L50-L55",
        "signature": "export type RouterNavigationPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: RoutesRecognized;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Payload of ROUTER_NAVIGATION.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterRequestAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L31-L36",
        "signature": "export type RouterRequestAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_REQUEST;\n  payload: RouterRequestPayload<T>;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An action dispatched when a router navigation request is fired.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterRequestPayload",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L21-L26",
        "signature": "export type RouterRequestPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationStart;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Payload of ROUTER_REQUEST\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "routerCancelAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L100-L103",
        "signature": "const routerCancelAction: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "routerErrorAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L133-L136",
        "signature": "const routerErrorAction: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "routerNavigatedAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L163-L166",
        "signature": "const routerNavigatedAction: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "routerNavigationAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L67-L70",
        "signature": "const routerNavigationAction: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "routerRequestAction",
    "overloads": [
      {
        "file": "modules/router-store/src/actions.ts#L38-L41",
        "signature": "const routerRequestAction: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "router-store",
    "name": "routerReducer",
    "overloads": [
      {
        "file": "modules/router-store/src/reducer.ts#L18-L37",
        "signature": "function routerReducer<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n>(\n  state: RouterReducerState<T> | undefined,\n  action: Action\n): RouterReducerState<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "state",
              "description": "",
              "type": "RouterReducerState<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "action",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "RouterReducerState",
    "overloads": [
      {
        "file": "modules/router-store/src/reducer.ts#L11-L16",
        "signature": "export type RouterReducerState<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  state: T;\n  navigationId: number;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router-store",
    "name": "StateKeyOrSelector",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L39-L41",
        "signature": "export type StateKeyOrSelector<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = string | Selector<any, RouterReducerState<T>>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router-store",
    "name": "StoreRouterConnectingModule",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L151-L343",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Connects RouterModule with StoreModule.\n\nDuring the navigation, before any guards or resolvers run, the router will dispatch\na ROUTER_NAVIGATION action, which has the following signature:\n\n```\nexport type RouterNavigationPayload = {\nrouterState: SerializedRouterStateSnapshot,\nevent: RoutesRecognized\n}\n```\n\nEither a reducer or an effect can be invoked in response to this action.\nIf the invoked reducer throws, the navigation will be canceled.\n\nIf navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\ndispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n\nBoth ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\nwhich can be used to restore the consistency of the store.\n\nUsage:\n\n```typescript"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\ndeclarations: [AppCmp, SimpleCmp],\nimports: [\nBrowserModule,\nStoreModule.forRoot(mapOfReducers),\nRouterModule.forRoot([\n{ path: '', component: SimpleCmp },\n{ path: 'next', component: SimpleCmp }\n]),\nStoreRouterConnectingModule.forRoot()\n],\nbootstrap: [AppCmp]\n})\nexport class AppModule {\n}\n```\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/router-store/src/router_store_module.ts#L153-L177",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "StoreRouterConfig<T>"
                    }
                  ]
                ],
                "signature": "static forRoot<  T extends BaseRouterStoreState = SerializedRouterStateSnapshot >(  config: StoreRouterConfig<T> = {} ): ModuleWithProviders<StoreRouterConnectingModule>;"
              }
            }
          ]
        ],
        "signature": "class StoreRouterConnectingModule {\n  static forRoot<\n    T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n  >(\n    config: StoreRouterConfig<T> = {}\n  ): ModuleWithProviders<StoreRouterConnectingModule>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router-store",
    "name": "StoreRouterConfig",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L52-L71",
        "signature": "interface StoreRouterConfig<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> {\n  stateKey?: StateKeyOrSelector<T>;\n  serializer?: new (...args: any[]) => RouterStateSerializer;\n  navigationActionTiming?: NavigationActionTiming;\n  routerState?: RouterState;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "router-store",
    "name": "NavigationActionTiming",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L79-L82",
        "signature": "export enum NavigationActionTiming {\n  PreActivation = 1,\n  PostActivation = 2,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "ROUTER_CONFIG",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L87-L89",
        "signature": "const ROUTER_CONFIG: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router-store",
    "name": "DEFAULT_ROUTER_FEATURENAME",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L90-L90",
        "signature": "const DEFAULT_ROUTER_FEATURENAME: 'router';",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "router-store",
    "name": "RouterState",
    "overloads": [
      {
        "file": "modules/router-store/src/router_store_module.ts#L47-L50",
        "signature": "export const enum RouterState {\n  Full,\n  Minimal,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Full = Serializes the router event with DefaultRouterStateSerializer\nMinimal = Serializes the router event with MinimalRouterStateSerializer\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router-store",
    "name": "RouterStateSerializer",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/base.ts#L12-L16",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "serialize",
              "info": {
                "file": "modules/router-store/src/serializers/base.ts#L15-L15",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "routerState",
                      "description": "",
                      "type": "RouterStateSnapshot"
                    }
                  ]
                ],
                "signature": "abstract serialize(routerState: RouterStateSnapshot): T;"
              }
            }
          ]
        ],
        "signature": "class RouterStateSerializer<\n  T extends BaseRouterStoreState = BaseRouterStoreState\n> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router-store",
    "name": "BaseRouterStoreState",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/base.ts#L8-L10",
        "signature": "interface BaseRouterStoreState {\n  url: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Simple router state.\nAll custom router states / state serializers should have at least\nthe properties of this interface.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router-store",
    "name": "DefaultRouterStateSerializer",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/default_serializer.ts#L9-L50",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "serialize",
              "info": {
                "file": "modules/router-store/src/serializers/default_serializer.ts#L11-L16",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "routerState",
                      "description": "",
                      "type": "RouterStateSnapshot"
                    }
                  ]
                ],
                "signature": "serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot;"
              }
            }
          ]
        ],
        "signature": "class DefaultRouterStateSerializer\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router-store",
    "name": "SerializedRouterStateSnapshot",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/default_serializer.ts#L4-L7",
        "signature": "interface SerializedRouterStateSnapshot {\n  root: ActivatedRouteSnapshot;\n  url: string;\n\n  // inherited from BaseRouterStoreState\n  url: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router-store",
    "name": "MinimalActivatedRouteSnapshot",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/minimal_serializer.ts#L4-L14",
        "signature": "interface MinimalActivatedRouteSnapshot {\n  routeConfig: ActivatedRouteSnapshot['routeConfig'];\n  url: ActivatedRouteSnapshot['url'];\n  params: ActivatedRouteSnapshot['params'];\n  queryParams: ActivatedRouteSnapshot['queryParams'];\n  fragment: ActivatedRouteSnapshot['fragment'];\n  data: ActivatedRouteSnapshot['data'];\n  outlet: ActivatedRouteSnapshot['outlet'];\n  firstChild?: MinimalActivatedRouteSnapshot;\n  children: MinimalActivatedRouteSnapshot[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router-store",
    "name": "MinimalRouterStateSnapshot",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/minimal_serializer.ts#L16-L19",
        "signature": "interface MinimalRouterStateSnapshot {\n  root: MinimalActivatedRouteSnapshot;\n  url: string;\n\n  // inherited from BaseRouterStoreState\n  url: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router-store",
    "name": "MinimalRouterStateSerializer",
    "overloads": [
      {
        "file": "modules/router-store/src/serializers/minimal_serializer.ts#L21-L53",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "serialize",
              "info": {
                "file": "modules/router-store/src/serializers/minimal_serializer.ts#L23-L28",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "routerState",
                      "description": "",
                      "type": "RouterStateSnapshot"
                    }
                  ]
                ],
                "signature": "serialize(routerState: RouterStateSnapshot): MinimalRouterStateSnapshot;"
              }
            }
          ]
        ],
        "signature": "class MinimalRouterStateSerializer\n  implements RouterStateSerializer<MinimalRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): MinimalRouterStateSnapshot;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "router-store",
    "name": "getSelectors",
    "overloads": [
      {
        "file": "modules/router-store/src/router_selectors.ts#L8-L63",
        "signature": "function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectState",
              "description": "",
              "type": "(state: V) => RouterReducerState<any>"
            }
          ]
        ]
      },
      {
        "file": "modules/router-store/src/router_selectors.ts#L5-L7",
        "signature": "function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectState",
              "description": "",
              "type": "(state: V) => RouterReducerState<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "Action",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L1-L3",
        "signature": "interface Action {\n  type: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "ActionCreator",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L85-L88",
        "signature": "export type ActionCreator<\n  T extends string = string,\n  C extends Creator = Creator\n> = C & TypedAction<T>;",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "See `Creator`.\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "ActionReducer",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L22-L24",
        "signature": "interface ActionReducer<T, V extends Action = Action> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A function that takes an `Action` and a `State`, and returns a `State`.\nSee `createReducer`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "ActionReducerMap",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L26-L28",
        "signature": "export type ActionReducerMap<T, V extends Action = Action> = {\n  [p in keyof T]: ActionReducer<T[p], V>;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "ActionReducerFactory",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L30-L35",
        "signature": "interface ActionReducerFactory<T, V extends Action = Action> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "ActionType",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L10-L12",
        "signature": "export type ActionType<A> = A extends ActionCreator<infer T, infer C>\n  ? ReturnType<C> & { type: T }\n  : never;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "Creator",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L71-L74",
        "signature": "export type Creator<\n  P extends any[] = any[],\n  R extends object = object\n> = FunctionWithParametersType<P, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A function that returns an object in the shape of the `Action` interface.  Configured using `createAction`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "MetaReducer",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L37-L39",
        "signature": "export type MetaReducer<T = any, V extends Action = Action> = (\n  reducer: ActionReducer<T, V>\n) => ActionReducer<T, V>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "Selector",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L49-L49",
        "signature": "export type Selector<T, V> = (state: T) => V;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "SelectorWithProps",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L51-L54",
        "signature": "export type SelectorWithProps<State, Props, Result> = (\n  state: State,\n  props: Props\n) => Result;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "RuntimeChecks",
    "overloads": [
      {
        "file": "modules/store/src/models.ts#L103-L130",
        "signature": "interface RuntimeChecks {\n  strictStateSerializability: boolean;\n  strictActionSerializability: boolean;\n  strictStateImmutability: boolean;\n  strictActionImmutability: boolean;\n  strictActionWithinNgZone: boolean;\n  strictActionTypeUniqueness?: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createAction",
    "overloads": [
      {
        "file": "modules/store/src/action_creator.ts#L101-L125",
        "signature": "function createAction<T extends string, C extends Creator>(\n  type: T,\n  config?: { _as: 'props' } | C\n): ActionCreator<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n\nAction creators reduce the explicitness of class-based action creators.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "Describes the action that will be dispatched",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.",
              "type": "{ _as: 'props'; } | C"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n**Declaring an action creator**\n\nWithout additional metadata:\n```ts\nexport const increment = createAction('[Counter] Increment');\n```\nWith additional metadata:\n```ts\nexport const loginSuccess = createAction(\n'[Auth/API] Login Success',\nprops<{ user: User }>()\n);\n```\nWith a function:\n```ts\nexport const loginSuccess = createAction(\n'[Auth/API] Login Success',\n(response: Response) => response.user\n);\n```\n\n**Dispatching an action**\n\nWithout additional metadata:\n```ts\nstore.dispatch(increment());\n```\nWith additional metadata:\n```ts\nstore.dispatch(loginSuccess({ user: newUser }));\n```\n\n**Referencing an action in a reducer**\n\nUsing a switch statement:\n```ts\nswitch (action.type) {\n// ...\ncase AuthApiActions.loginSuccess.type: {\nreturn {\n...state,\nuser: action.user\n};\n}\n}\n```\nUsing a reducer creator:\n```ts\non(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n```\n\n**Referencing an action in an effect**\n```ts\neffectName$ = createEffect(\n() => this.actions$.pipe(\nofType(AuthApiActions.loginSuccess),\n// ...\n)\n);\n```\n"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/action_creator.ts#L14-L16",
        "signature": "function createAction<T extends string>(\n  type: T\n): ActionCreator<T, () => TypedAction<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "T"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/action_creator.ts#L17-L20",
        "signature": "function createAction<T extends string, P extends object>(\n  type: T,\n  config: Props<P> & NotAllowedCheck<P>\n): ActionCreator<T, (props: P & NotAllowedCheck<P>) => P & TypedAction<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "Props<P> & NotAllowedCheck<P>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/action_creator.ts#L21-L28",
        "signature": "function createAction<T extends string, P extends any[], R extends object>(\n  type: T,\n  creator: Creator<P, R> & NotAllowedCheck<R>\n): FunctionWithParametersType<P, R & TypedAction<T>> & TypedAction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator",
              "description": "",
              "type": "FunctionWithParametersType<P, R> & NotAllowedCheck<R>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "props",
    "overloads": [
      {
        "file": "modules/store/src/action_creator.ts#L127-L129",
        "signature": "function props<P extends object>(): Props<P>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "union",
    "overloads": [
      {
        "file": "modules/store/src/action_creator.ts#L131-L135",
        "signature": "function union<C extends { [key: string]: ActionCreator<string, Creator> }>(\n  creators: C\n): ReturnType<C[keyof C]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creators",
              "description": "",
              "type": "C"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "Store",
    "overloads": [
      {
        "file": "modules/store/src/store.ts#L10-L129",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L83-L88",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pathOrMapFn",
                      "description": "",
                      "type": "string | ((state: T, props?: Props) => K)"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "paths",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "select<Props = any, K = any>(  pathOrMapFn: ((state: T, props?: Props) => K) | string,  ...paths: string[] ): Observable<any>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L23-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mapFn",
                      "description": "",
                      "type": "(state: T) => K"
                    }
                  ]
                ],
                "signature": "select<K>(mapFn: (state: T) => K): Observable<K>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L24-L27",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mapFn",
                      "description": "",
                      "type": "(state: T, props: Props) => K"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "props",
                      "description": "",
                      "type": "Props"
                    }
                  ]
                ],
                "signature": "select<K, Props = any>(  mapFn: (state: T, props: Props) => K,  props: Props ): Observable<K>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L28-L28",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "a"
                    }
                  ]
                ],
                "signature": "select<a extends keyof T>(key: a): Observable<T[a]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L29-L32",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ]
                ],
                "signature": "select<a extends keyof T, b extends keyof T[a]>(  key1: a,  key2: b ): Observable<T[a][b]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L33-L37",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key3",
                      "description": "",
                      "type": "c"
                    }
                  ]
                ],
                "signature": "select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(  key1: a,  key2: b,  key3: c ): Observable<T[a][b][c]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L38-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key3",
                      "description": "",
                      "type": "c"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key4",
                      "description": "",
                      "type": "d"
                    }
                  ]
                ],
                "signature": "select<  a extends keyof T,  b extends keyof T[a],  c extends keyof T[a][b],  d extends keyof T[a][b][c] >(key1: a, key2: b, key3: c, key4: d): Observable<T[a][b][c][d]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L44-L50",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key3",
                      "description": "",
                      "type": "c"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key4",
                      "description": "",
                      "type": "d"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key5",
                      "description": "",
                      "type": "e"
                    }
                  ]
                ],
                "signature": "select<  a extends keyof T,  b extends keyof T[a],  c extends keyof T[a][b],  d extends keyof T[a][b][c],  e extends keyof T[a][b][c][d] >(key1: a, key2: b, key3: c, key4: d, key5: e): Observable<T[a][b][c][d][e]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L51-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key3",
                      "description": "",
                      "type": "c"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key4",
                      "description": "",
                      "type": "d"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key5",
                      "description": "",
                      "type": "e"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key6",
                      "description": "",
                      "type": "f"
                    }
                  ]
                ],
                "signature": "select<  a extends keyof T,  b extends keyof T[a],  c extends keyof T[a][b],  d extends keyof T[a][b][c],  e extends keyof T[a][b][c][d],  f extends keyof T[a][b][c][d][e] >(  key1: a,  key2: b,  key3: c,  key4: d,  key5: e,  key6: f ): Observable<T[a][b][c][d][e][f]>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "select",
              "info": {
                "file": "modules/store/src/store.ts#L66-L82",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key1",
                      "description": "",
                      "type": "a"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key2",
                      "description": "",
                      "type": "b"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key3",
                      "description": "",
                      "type": "c"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key4",
                      "description": "",
                      "type": "d"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key5",
                      "description": "",
                      "type": "e"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key6",
                      "description": "",
                      "type": "f"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "paths",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "select<  a extends keyof T,  b extends keyof T[a],  c extends keyof T[a][b],  d extends keyof T[a][b][c],  e extends keyof T[a][b][c][d],  f extends keyof T[a][b][c][d][e],  K = any >(  key1: a,  key2: b,  key3: c,  key4: d,  key5: e,  key6: f,  ...paths: string[] ): Observable<K>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lift",
              "info": {
                "file": "modules/store/src/store.ts#L90-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operator",
                      "description": "",
                      "type": "Operator<T, R>"
                    }
                  ]
                ],
                "signature": "lift<R>(operator: Operator<T, R>): Store<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/store/src/store.ts#L97-L105",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "V & FunctionIsNotAllowed<V, \"Functions are not allowed to be dispatched. Did you forget to call the action creator function?\">"
                    }
                  ]
                ],
                "signature": "dispatch<V extends Action = Action>(  action: V &   FunctionIsNotAllowed<    V,    'Functions are not allowed to be dispatched. Did you forget to call the action creator function?'   > );"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "modules/store/src/store.ts#L107-L109",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "Action"
                    }
                  ]
                ],
                "signature": "next(action: Action);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "modules/store/src/store.ts#L111-L113",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "err",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(err: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "modules/store/src/store.ts#L115-L117",
                "info": [],
                "signature": "complete();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addReducer",
              "info": {
                "file": "modules/store/src/store.ts#L119-L124",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducer",
                      "description": "",
                      "type": "ActionReducer<State, Actions>"
                    }
                  ]
                ],
                "signature": "addReducer<State, Actions extends Action = Action>(  key: string,  reducer: ActionReducer<State, Actions> );"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeReducer",
              "info": {
                "file": "modules/store/src/store.ts#L126-L128",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "Key"
                    }
                  ]
                ],
                "signature": "removeReducer<Key extends Extract<keyof T, string>>(key: Key);"
              }
            }
          ]
        ],
        "signature": "class Store<T = object> extends Observable<T> implements Observer<Action> {\n  select<Props = any, K = any>(\n    pathOrMapFn: ((state: T, props?: Props) => K) | string,\n    ...paths: string[]\n  ): Observable<any>;\n  select<K>(mapFn: (state: T) => K): Observable<K>;\n  select<K, Props = any>(\n    mapFn: (state: T, props: Props) => K,\n    props: Props\n  ): Observable<K>;\n  select<a extends keyof T>(key: a): Observable<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(\n    key1: a,\n    key2: b\n  ): Observable<T[a][b]>;\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(\n    key1: a,\n    key2: b,\n    key3: c\n  ): Observable<T[a][b][c]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c]\n  >(key1: a, key2: b, key3: c, key4: d): Observable<T[a][b][c][d]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d]\n  >(key1: a, key2: b, key3: c, key4: d, key5: e): Observable<T[a][b][c][d][e]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e]\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f\n  ): Observable<T[a][b][c][d][e][f]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e],\n    K = any\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f,\n    ...paths: string[]\n  ): Observable<K>;\n  lift<R>(operator: Operator<T, R>): Store<R>;\n  dispatch<V extends Action = Action>(\n    action: V &\n      FunctionIsNotAllowed<\n        V,\n        'Functions are not allowed to be dispatched. Did you forget to call the action creator function?'\n      >\n  );\n  next(action: Action);\n  error(err: any);\n  complete();\n  addReducer<State, Actions extends Action = Action>(\n    key: string,\n    reducer: ActionReducer<State, Actions>\n  );\n  removeReducer<Key extends Extract<keyof T, string>>(key: Key);\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "select",
    "overloads": [
      {
        "file": "modules/store/src/store.ts#L214-L238",
        "signature": "function select<T, Props, K>(\n  pathOrMapFn: ((state: T, props?: Props) => any) | string,\n  propsOrPath?: Props | string,\n  ...paths: string[]\n);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "pathOrMapFn",
              "description": "",
              "type": "string | ((state: T, props?: Props) => any)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propsOrPath",
              "description": "",
              "type": "string | Props"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "paths",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L133-L136",
        "signature": "function select<T, Props, K>(\n  mapFn: (state: T, props: Props) => K,\n  props?: Props\n): (source$: Observable<T>) => Observable<K>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "mapFn",
              "description": "",
              "type": "(state: T, props: Props) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "props",
              "description": "",
              "type": "Props"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L137-L139",
        "signature": "function select<T, a extends keyof T>(\n  key: a\n): (source$: Observable<T>) => Observable<T[a]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "a"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L140-L143",
        "signature": "function select<T, a extends keyof T, b extends keyof T[a]>(\n  key1: a,\n  key2: b\n): (source$: Observable<T>) => Observable<T[a][b]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L144-L153",
        "signature": "function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b]\n>(\n  key1: a,\n  key2: b,\n  key3: c\n): (source$: Observable<T>) => Observable<T[a][b][c]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key3",
              "description": "",
              "type": "c"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L154-L165",
        "signature": "function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d\n): (source$: Observable<T>) => Observable<T[a][b][c][d]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key3",
              "description": "",
              "type": "c"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key4",
              "description": "",
              "type": "d"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L166-L179",
        "signature": "function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key3",
              "description": "",
              "type": "c"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key4",
              "description": "",
              "type": "d"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key5",
              "description": "",
              "type": "e"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L180-L195",
        "signature": "function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e][f]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key3",
              "description": "",
              "type": "c"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key4",
              "description": "",
              "type": "d"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key5",
              "description": "",
              "type": "e"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key6",
              "description": "",
              "type": "f"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/store.ts#L196-L213",
        "signature": "function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e],\n  K = any\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f,\n  ...paths: string[]\n): (source$: Observable<T>) => Observable<K>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key1",
              "description": "",
              "type": "a"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key2",
              "description": "",
              "type": "b"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key3",
              "description": "",
              "type": "c"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key4",
              "description": "",
              "type": "d"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key5",
              "description": "",
              "type": "e"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key6",
              "description": "",
              "type": "f"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "paths",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "combineReducers",
    "overloads": [
      {
        "file": "modules/store/src/utils.ts#L14-L45",
        "signature": "function combineReducers(\n  reducers: any,\n  initialState: any = {}\n): ActionReducer<any, Action>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "reducers",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "initialState",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L10-L13",
        "signature": "function combineReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V>,\n  initialState?: Partial<T>\n): ActionReducer<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "reducers",
              "description": "",
              "type": "ActionReducerMap<T, V>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "initialState",
              "description": "",
              "type": "Partial<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "compose",
    "overloads": [
      {
        "file": "modules/store/src/utils.ts#L78-L89",
        "signature": "function compose(...functions: any[]);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "functions",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L56-L56",
        "signature": "function compose<A>(): (i: A) => A;",
        "info": []
      },
      {
        "file": "modules/store/src/utils.ts#L57-L57",
        "signature": "function compose<A, B>(b: (i: A) => B): (i: A) => B;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "(i: A) => B"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L58-L58",
        "signature": "function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "c",
              "description": "",
              "type": "(i: B) => C"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "(i: A) => B"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L59-L63",
        "signature": "function compose<A, B, C, D>(\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => D;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "d",
              "description": "",
              "type": "(i: C) => D"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c",
              "description": "",
              "type": "(i: B) => C"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "(i: A) => B"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L64-L69",
        "signature": "function compose<A, B, C, D, E>(\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => E;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "e",
              "description": "",
              "type": "(i: D) => E"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "d",
              "description": "",
              "type": "(i: C) => D"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c",
              "description": "",
              "type": "(i: B) => C"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "(i: A) => B"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L70-L76",
        "signature": "function compose<A, B, C, D, E, F>(\n  f: (i: E) => F,\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => F;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "f",
              "description": "",
              "type": "(i: E) => F"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "e",
              "description": "",
              "type": "(i: D) => E"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "d",
              "description": "",
              "type": "(i: C) => D"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c",
              "description": "",
              "type": "(i: B) => C"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "(i: A) => B"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/utils.ts#L77-L77",
        "signature": "function compose<A = any, F = any>(...functions: any[]): (i: A) => F;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "functions",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createReducerFactory",
    "overloads": [
      {
        "file": "modules/store/src/utils.ts#L91-L109",
        "signature": "function createReducerFactory<T, V extends Action = Action>(\n  reducerFactory: ActionReducerFactory<T, V>,\n  metaReducers?: MetaReducer<T, V>[]\n): ActionReducerFactory<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "reducerFactory",
              "description": "",
              "type": "ActionReducerFactory<T, V>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metaReducers",
              "description": "",
              "type": "MetaReducer<T, V>[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "ActionsSubject",
    "overloads": [
      {
        "file": "modules/store/src/actions_subject.ts#L8-L36",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "modules/store/src/actions_subject.ts#L15-L27",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "Action"
                    }
                  ]
                ],
                "signature": "next(action: Action): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "modules/store/src/actions_subject.ts#L29-L31",
                "info": [],
                "signature": "complete();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/store/src/actions_subject.ts#L31-L33",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class ActionsSubject extends BehaviorSubject<Action> implements OnDestroy {\n  next(action: Action): void;\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "INIT",
    "overloads": [
      {
        "file": "modules/store/src/actions_subject.ts#L6-L6",
        "signature": "const INIT: '@ngrx/store/init';",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "setNgrxMockEnvironment",
    "overloads": [
      {
        "file": "modules/store/src/flags.ts#L2-L4",
        "signature": "function setNgrxMockEnvironment(value: boolean): void;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "isNgrxMockEnvironment",
    "overloads": [
      {
        "file": "modules/store/src/flags.ts#L5-L7",
        "signature": "function isNgrxMockEnvironment(): boolean;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "ReducerManager",
    "overloads": [
      {
        "file": "modules/store/src/reducer_manager.ts#L25-L104",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "addFeature",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L38-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "feature",
                      "description": "",
                      "type": "StoreFeature<any, any>"
                    }
                  ]
                ],
                "signature": "addFeature(feature: StoreFeature<any, any>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addFeatures",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L42-L63",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "features",
                      "description": "",
                      "type": "StoreFeature<any, any>[]"
                    }
                  ]
                ],
                "signature": "addFeatures(features: StoreFeature<any, any>[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeFeature",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L65-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "feature",
                      "description": "",
                      "type": "StoreFeature<any, any>"
                    }
                  ]
                ],
                "signature": "removeFeature(feature: StoreFeature<any, any>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeFeatures",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L69-L71",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "features",
                      "description": "",
                      "type": "StoreFeature<any, any>[]"
                    }
                  ]
                ],
                "signature": "removeFeatures(features: StoreFeature<any, any>[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addReducer",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L73-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducer",
                      "description": "",
                      "type": "ActionReducer<any, any>"
                    }
                  ]
                ],
                "signature": "addReducer(key: string, reducer: ActionReducer<any, any>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addReducers",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L77-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "",
                      "type": "{ [key: string]: ActionReducer<any, any>; }"
                    }
                  ]
                ],
                "signature": "addReducers(reducers: { [key: string]: ActionReducer<any, any> });"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeReducer",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L82-L84",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureKey",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "removeReducer(featureKey: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeReducers",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L86-L91",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureKeys",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "removeReducers(featureKeys: string[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/store/src/reducer_manager.ts#L101-L103",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class ReducerManager extends BehaviorSubject<ActionReducer<any, any>>\n  implements OnDestroy {\n  addFeature(feature: StoreFeature<any, any>);\n  addFeatures(features: StoreFeature<any, any>[]);\n  removeFeature(feature: StoreFeature<any, any>);\n  removeFeatures(features: StoreFeature<any, any>[]);\n  addReducer(key: string, reducer: ActionReducer<any, any>);\n  addReducers(reducers: { [key: string]: ActionReducer<any, any> });\n  removeReducer(featureKey: string);\n  removeReducers(featureKeys: string[]);\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "ReducerObservable",
    "overloads": [
      {
        "file": "modules/store/src/reducer_manager.ts#L19-L21",
        "info": [],
        "signature": "class ReducerObservable extends Observable<ActionReducer<any, any>> {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "ReducerManagerDispatcher",
    "overloads": [
      {
        "file": "modules/store/src/reducer_manager.ts#L22-L22",
        "info": [],
        "signature": "class ReducerManagerDispatcher extends ActionsSubject {}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "UPDATE",
    "overloads": [
      {
        "file": "modules/store/src/reducer_manager.ts#L23-L23",
        "signature": "const UPDATE: '@ngrx/store/update-reducers';",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "ScannedActionsSubject",
    "overloads": [
      {
        "file": "modules/store/src/scanned_actions_subject.ts#L6-L12",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/store/src/scanned_actions_subject.ts#L9-L11",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class ScannedActionsSubject extends Subject<Action> implements OnDestroy {\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createSelector",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L509-L513",
        "signature": "function createSelector(\n  ...input: any[]\n): MemoizedSelector<any, any> | MemoizedSelectorWithProps<any, any, any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L121-L124",
        "signature": "function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (s1: S1) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L125-L128",
        "signature": "function createSelector<State, Props, S1, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L129-L132",
        "signature": "function createSelector<State, S1, Result>(\n  selectors: [Selector<State, S1>],\n  projector: (s1: S1) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L133-L136",
        "signature": "function createSelector<State, Props, S1, Result>(\n  selectors: [SelectorWithProps<State, Props, S1>],\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L138-L142",
        "signature": "function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L143-L147",
        "signature": "function createSelector<State, Props, S1, S2, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L148-L151",
        "signature": "function createSelector<State, S1, S2, Result>(\n  selectors: [Selector<State, S1>, Selector<State, S2>],\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L152-L158",
        "signature": "function createSelector<State, Props, S1, S2, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>\n  ],\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L160-L165",
        "signature": "function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L166-L171",
        "signature": "function createSelector<State, Props, S1, S2, S3, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L172-L175",
        "signature": "function createSelector<State, S1, S2, S3, Result>(\n  selectors: [Selector<State, S1>, Selector<State, S2>, Selector<State, S3>],\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L176-L183",
        "signature": "function createSelector<State, Props, S1, S2, S3, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L185-L191",
        "signature": "function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "Selector<State, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L192-L198",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "SelectorWithProps<State, Props, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L199-L207",
        "signature": "function createSelector<State, S1, S2, S3, S4, Result>(\n  selectors: [\n    Selector<State, S1>,\n    Selector<State, S2>,\n    Selector<State, S3>,\n    Selector<State, S4>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>, Selector<State, S4>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L208-L216",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>, SelectorWithProps<State, Props, S4>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L218-L225",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "Selector<State, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "Selector<State, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L226-L233",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "SelectorWithProps<State, Props, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "SelectorWithProps<State, Props, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L234-L243",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  selectors: [\n    Selector<State, S1>,\n    Selector<State, S2>,\n    Selector<State, S3>,\n    Selector<State, S4>,\n    Selector<State, S5>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>, Selector<State, S4>, Selector<State, S5>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L244-L253",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>, SelectorWithProps<State, Props, S4>, SelectorWithProps<State, Props, S5>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L255-L263",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "Selector<State, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "Selector<State, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "Selector<State, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L264-L280",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "SelectorWithProps<State, Props, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "SelectorWithProps<State, Props, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "SelectorWithProps<State, Props, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L281-L292",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  selectors: [\n    Selector<State, S1>,\n    Selector<State, S2>,\n    Selector<State, S3>,\n\n    Selector<State, S4>,\n    Selector<State, S5>,\n    Selector<State, S6>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>, Selector<State, S4>, Selector<State, S5>, Selector<State, S6>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L293-L311",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>, SelectorWithProps<State, Props, S4>, SelectorWithProps<State, Props, S5>, SelectorWithProps<State, Props, S6>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L313-L322",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "Selector<State, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "Selector<State, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "Selector<State, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s7",
              "description": "",
              "type": "Selector<State, S7>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L323-L352",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "SelectorWithProps<State, Props, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "SelectorWithProps<State, Props, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "SelectorWithProps<State, Props, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s7",
              "description": "",
              "type": "SelectorWithProps<State, Props, S7>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L353-L364",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  selectors: [\n    Selector<State, S1>,\n    Selector<State, S2>,\n    Selector<State, S3>,\n    Selector<State, S4>,\n    Selector<State, S5>,\n    Selector<State, S6>,\n    Selector<State, S7>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>, Selector<State, S4>, Selector<State, S5>, Selector<State, S6>, Selector<State, S7>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L365-L396",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, S7, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>, SelectorWithProps<State, Props, S4>, SelectorWithProps<State, Props, S5>, SelectorWithProps<State, Props, S6>, SelectorWithProps<State, Props, S7>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L398-L417",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "Selector<State, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "Selector<State, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "Selector<State, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "Selector<State, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "Selector<State, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "Selector<State, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s7",
              "description": "",
              "type": "Selector<State, S7>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s8",
              "description": "",
              "type": "Selector<State, S8>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, s8: S8) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L418-L450",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  s8: SelectorWithProps<State, Props, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "s1",
              "description": "",
              "type": "SelectorWithProps<State, Props, S1>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s2",
              "description": "",
              "type": "SelectorWithProps<State, Props, S2>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s3",
              "description": "",
              "type": "SelectorWithProps<State, Props, S3>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s4",
              "description": "",
              "type": "SelectorWithProps<State, Props, S4>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s5",
              "description": "",
              "type": "SelectorWithProps<State, Props, S5>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s6",
              "description": "",
              "type": "SelectorWithProps<State, Props, S6>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s7",
              "description": "",
              "type": "SelectorWithProps<State, Props, S7>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "s8",
              "description": "",
              "type": "SelectorWithProps<State, Props, S8>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, s8: S8, props: Props) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L451-L472",
        "signature": "function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  selectors: [\n    Selector<State, S1>,\n    Selector<State, S2>,\n    Selector<State, S3>,\n    Selector<State, S4>,\n    Selector<State, S5>,\n    Selector<State, S6>,\n    Selector<State, S7>,\n    Selector<State, S8>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[Selector<State, S1>, Selector<State, S2>, Selector<State, S3>, Selector<State, S4>, Selector<State, S5>, Selector<State, S6>, Selector<State, S7>, Selector<State, S8>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, s8: S8) => Result"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L473-L507",
        "signature": "function createSelector<State, Props, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>,\n    SelectorWithProps<State, Props, S8>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "[SelectorWithProps<State, Props, S1>, SelectorWithProps<State, Props, S2>, SelectorWithProps<State, Props, S3>, SelectorWithProps<State, Props, S4>, SelectorWithProps<State, Props, S5>, SelectorWithProps<State, Props, S6>, SelectorWithProps<State, Props, S7>, SelectorWithProps<State, Props, S8>]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projector",
              "description": "",
              "type": "(s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, s8: S8, props: Props) => Result"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createSelectorFactory",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L555-L604",
        "signature": "function createSelectorFactory(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<any, any> = {\n    stateFn: defaultStateFn,\n  }\n);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "memoize",
              "description": "",
              "type": "MemoizeFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "SelectorFactoryConfig<any, any>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L541-L543",
        "signature": "function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelector<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "memoize",
              "description": "",
              "type": "MemoizeFn"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L544-L547",
        "signature": "function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelector<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "memoize",
              "description": "",
              "type": "MemoizeFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "SelectorFactoryConfig<T, V>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L548-L550",
        "signature": "function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "memoize",
              "description": "",
              "type": "MemoizeFn"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L551-L554",
        "signature": "function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "memoize",
              "description": "",
              "type": "MemoizeFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "SelectorFactoryConfig<T, V>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createFeatureSelector",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L612-L633",
        "signature": "function createFeatureSelector(featureName: any): MemoizedSelector<any, any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "featureName",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L606-L608",
        "signature": "function createFeatureSelector<T>(\n  featureName: string\n): MemoizedSelector<object, T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "featureName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/selector.ts#L609-L611",
        "signature": "function createFeatureSelector<T, V>(\n  featureName: keyof T\n): MemoizedSelector<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "featureName",
              "description": "",
              "type": "keyof T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "defaultMemoize",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L67-L119",
        "signature": "function defaultMemoize(\n  projectionFn: AnyFn,\n  isArgumentsEqual = isEqualCheck,\n  isResultEqual = isEqualCheck\n): MemoizedProjection;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "projectionFn",
              "description": "",
              "type": "AnyFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "isArgumentsEqual",
              "description": "",
              "type": "typeof isEqualCheck"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "isResultEqual",
              "description": "",
              "type": "typeof isEqualCheck"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "defaultStateFn",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L515-L530",
        "signature": "function defaultStateFn(\n  state: any,\n  selectors: Selector<any, any>[] | SelectorWithProps<any, any, any>[],\n  props: any,\n  memoizedProjector: MemoizedProjection\n): any;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "state",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "Selector<any, any>[] | SelectorWithProps<any, any, any>[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "props",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "memoizedProjector",
              "description": "",
              "type": "MemoizedProjection"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "MemoizeFn",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L14-L14",
        "signature": "export type MemoizeFn = (t: AnyFn) => MemoizedProjection;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "MemoizedProjection",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L7-L12",
        "signature": "export type MemoizedProjection = {\n  memoized: AnyFn;\n  reset: () => void;\n  setResult: (result?: any) => void;\n  clearResult: () => void;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "MemoizedSelector",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L20-L29",
        "signature": "interface MemoizedSelector<\n  State,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> {\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "MemoizedSelectorWithProps",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L31-L41",
        "signature": "interface MemoizedSelectorWithProps<\n  State,\n  Props,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> {\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "resultMemoize",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L60-L65",
        "signature": "function resultMemoize(projectionFn: AnyFn, isResultEqual: ComparatorFn);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "projectionFn",
              "description": "",
              "type": "AnyFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "isResultEqual",
              "description": "",
              "type": "ComparatorFn"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store",
    "name": "DefaultProjectorFn",
    "overloads": [
      {
        "file": "modules/store/src/selector.ts#L18-L18",
        "signature": "export type DefaultProjectorFn<T> = (...args: any[]) => T;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "State",
    "overloads": [
      {
        "file": "modules/store/src/state.ts#L18-L61",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/store/src/state.ts#L57-L60",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "INIT",
              "type": "\"@ngrx/store/init\"",
              "description": ""
            }
          ]
        ],
        "signature": "class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = INIT;\n\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "StateObservable",
    "overloads": [
      {
        "file": "modules/store/src/state.ts#L16-L16",
        "info": [],
        "signature": "class StateObservable extends Observable<any> {}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "reduceState",
    "overloads": [
      {
        "file": "modules/store/src/state.ts#L67-L73",
        "signature": "function reduceState<T, V extends Action = Action>(\n  stateActionPair: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "stateActionPair",
              "description": "",
              "type": "StateActionPair<T, V>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "[action, reducer]",
              "description": "",
              "type": "[V, ActionReducer<T, V>]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "INITIAL_STATE",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L10-L10",
        "signature": "const INITIAL_STATE: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "REDUCER_FACTORY",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L11-L13",
        "signature": "const REDUCER_FACTORY: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "INITIAL_REDUCERS",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L17-L19",
        "signature": "const INITIAL_REDUCERS: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "STORE_FEATURES",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L23-L23",
        "signature": "const STORE_FEATURES: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "META_REDUCERS",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L56-L58",
        "signature": "const META_REDUCERS: InjectionToken<\n  MetaReducer<\n    any,\n    import('C:/Users/tdeschryver/dev/platform/modules/store/src/models').Action\n  >[]\n>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "FEATURE_REDUCERS",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L42-L44",
        "signature": "const FEATURE_REDUCERS: InjectionToken<unknown>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "USER_PROVIDED_META_REDUCERS",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L49-L51",
        "signature": "const USER_PROVIDED_META_REDUCERS: InjectionToken<\n  MetaReducer<\n    any,\n    import('C:/Users/tdeschryver/dev/platform/modules/store/src/models').Action\n  >[]\n>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store",
    "name": "USER_RUNTIME_CHECKS",
    "overloads": [
      {
        "file": "modules/store/src/tokens.ts#L72-L74",
        "signature": "const USER_RUNTIME_CHECKS: InjectionToken<RuntimeChecks>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "StoreModule",
    "overloads": [
      {
        "file": "modules/store/src/store_module.ts#L117-L257",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/store/src/store_module.ts#L123-L183",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "",
                      "type": "ActionReducerMap<any, any> | InjectionToken<ActionReducerMap<any, any>>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "RootStoreConfig<any, any>"
                    }
                  ]
                ],
                "signature": "static forRoot(  reducers:   | ActionReducerMap<any, any>   | InjectionToken<ActionReducerMap<any, any>>,  config: RootStoreConfig<any, any> = {} ): ModuleWithProviders<StoreRootModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "modules/store/src/store_module.ts#L119-L122",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "",
                      "type": "ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "RootStoreConfig<T, V>"
                    }
                  ]
                ],
                "signature": "static forRoot<T, V extends Action = Action>(  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,  config?: RootStoreConfig<T, V> ): ModuleWithProviders<StoreRootModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forFeature",
              "info": {
                "file": "modules/store/src/store_module.ts#L195-L256",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "",
                      "type": "ActionReducerMap<any, any> | InjectionToken<ActionReducerMap<any, any>> | ActionReducer<any, any> | InjectionToken<ActionReducer<any, any>>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "StoreConfig<any, any> | InjectionToken<StoreConfig<any, any>>"
                    }
                  ]
                ],
                "signature": "static forFeature(  featureName: string,  reducers:   | ActionReducerMap<any, any>   | InjectionToken<ActionReducerMap<any, any>>   | ActionReducer<any, any>   | InjectionToken<ActionReducer<any, any>>,  config: StoreConfig<any, any> | InjectionToken<StoreConfig<any, any>> = {} ): ModuleWithProviders<StoreFeatureModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forFeature",
              "info": {
                "file": "modules/store/src/store_module.ts#L185-L189",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducers",
                      "description": "",
                      "type": "ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>"
                    }
                  ]
                ],
                "signature": "static forFeature<T, V extends Action = Action>(  featureName: string,  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> ): ModuleWithProviders<StoreFeatureModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forFeature",
              "info": {
                "file": "modules/store/src/store_module.ts#L190-L194",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "featureName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reducer",
                      "description": "",
                      "type": "ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "",
                      "type": "StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>"
                    }
                  ]
                ],
                "signature": "static forFeature<T, V extends Action = Action>(  featureName: string,  reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> ): ModuleWithProviders<StoreFeatureModule>;"
              }
            }
          ]
        ],
        "signature": "class StoreModule {\n  static forRoot(\n    reducers:\n      | ActionReducerMap<any, any>\n      | InjectionToken<ActionReducerMap<any, any>>,\n    config: RootStoreConfig<any, any> = {}\n  ): ModuleWithProviders<StoreRootModule>;\n  static forRoot<T, V extends Action = Action>(\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: RootStoreConfig<T, V>\n  ): ModuleWithProviders<StoreRootModule>;\n  static forFeature(\n    featureName: string,\n    reducers:\n      | ActionReducerMap<any, any>\n      | InjectionToken<ActionReducerMap<any, any>>\n      | ActionReducer<any, any>\n      | InjectionToken<ActionReducer<any, any>>,\n    config: StoreConfig<any, any> | InjectionToken<StoreConfig<any, any>> = {}\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "StoreRootModule",
    "overloads": [
      {
        "file": "modules/store/src/store_module.ts#L60-L74",
        "info": [],
        "signature": "class StoreRootModule {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store",
    "name": "StoreFeatureModule",
    "overloads": [
      {
        "file": "modules/store/src/store_module.ts#L76-L104",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "modules/store/src/store_module.ts#L101-L103",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class StoreFeatureModule implements OnDestroy {\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "RootStoreConfig",
    "overloads": [
      {
        "file": "modules/store/src/store_module.ts#L112-L115",
        "signature": "interface RootStoreConfig<T, V extends Action = Action> {\n  runtimeChecks?: Partial<RuntimeChecks>;\n\n  // inherited from StoreConfig\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n  metaReducers?: MetaReducer<T, V>[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "StoreConfig",
    "overloads": [
      {
        "file": "modules/store/src/store_module.ts#L106-L110",
        "signature": "interface StoreConfig<T, V extends Action = Action> {\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n  metaReducers?: MetaReducer<T, V>[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store",
    "name": "On",
    "overloads": [
      {
        "file": "modules/store/src/reducer_creator.ts#L4-L7",
        "signature": "interface On<S> {\n  reducer: ActionReducer<S>;\n  types: string[];\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "on",
    "overloads": [
      {
        "file": "modules/store/src/reducer_creator.ts#L181-L190",
        "signature": "function on(\n  ...args: (ActionCreator | Function)[]\n): { reducer: Function; types: string[] };",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nAssociates actions with a given state change function.\nA state change function must be provided as the last parameter.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "`ActionCreator`'s followed by a state change function.",
              "type": "(Function | ActionCreator<string, import(\"C:/Users/tdeschryver/dev/platform/modules/store/src/models\").FunctionWithParametersType<any[], object>>)[]"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "an association of action types with a state change function.\n"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L14-L17",
        "signature": "function on<C1 extends ActionCreator, S>(\n  creator1: C1,\n  reducer: OnReducer<S, [C1]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L18-L22",
        "signature": "function on<C1 extends ActionCreator, C2 extends ActionCreator, S>(\n  creator1: C1,\n  creator2: C2,\n  reducer: OnReducer<S, [C1, C2]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L23-L33",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  reducer: OnReducer<S, [C1, C2, C3]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L34-L46",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  reducer: OnReducer<S, [C1, C2, C3, C4]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L47-L61",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L62-L78",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator6",
              "description": "",
              "type": "C6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5, C6]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L79-L97",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator6",
              "description": "",
              "type": "C6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator7",
              "description": "",
              "type": "C7"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5, C6, C7]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L98-L118",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator6",
              "description": "",
              "type": "C6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator7",
              "description": "",
              "type": "C7"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator8",
              "description": "",
              "type": "C8"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L119-L141",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  C9 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  creator9: C9,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator6",
              "description": "",
              "type": "C6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator7",
              "description": "",
              "type": "C7"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator8",
              "description": "",
              "type": "C8"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator9",
              "description": "",
              "type": "C9"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L142-L166",
        "signature": "function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  C9 extends ActionCreator,\n  C10 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  creator9: C9,\n  creator10: C10,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10]>\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator1",
              "description": "",
              "type": "C1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator2",
              "description": "",
              "type": "C2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator3",
              "description": "",
              "type": "C3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator4",
              "description": "",
              "type": "C4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator5",
              "description": "",
              "type": "C5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator6",
              "description": "",
              "type": "C6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator7",
              "description": "",
              "type": "C7"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator8",
              "description": "",
              "type": "C8"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator9",
              "description": "",
              "type": "C9"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "creator10",
              "description": "",
              "type": "C10"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "reducer",
              "description": "",
              "type": "OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10]>"
            }
          ]
        ]
      },
      {
        "file": "modules/store/src/reducer_creator.ts#L167-L170",
        "signature": "function on<S>(\n  creator: ActionCreator,\n  ...rest: (ActionCreator | OnReducer<S, [ActionCreator]>)[]\n): On<S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "creator",
              "description": "",
              "type": "ActionCreator<string, import(\"C:/Users/tdeschryver/dev/platform/modules/store/src/models\").FunctionWithParametersType<any[], object>>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "rest",
              "description": "",
              "type": "(ActionCreator<string, import(\"C:/Users/tdeschryver/dev/platform/modules/store/src/models\").FunctionWithParametersType<any[], object>> | OnReducer<S, [ActionCreator<string, import(\"C:/Users/tdeschryver/dev/platform/modules/store/src/models\").FunctionWithParametersType<any[], object>>]>)[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "store",
    "name": "createReducer",
    "overloads": [
      {
        "file": "modules/store/src/reducer_creator.ts#L240-L262",
        "signature": "function createReducer<S, A extends Action = Action>(\n  initialState: S,\n  ...ons: On<S>[]\n): ActionReducer<S, A>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates a reducer function to handle state transitions.\n\nReducer creators reduce the explicitness of reducer functions with switch statements.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "initialState",
              "description": "Provides a state value if the current state is `undefined`, as it is initially.",
              "type": "S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ons",
              "description": "Associations between actions and state changes.",
              "type": "On<S>[]"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "A reducer function.\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n- Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n- The returned `ActionReducer` should additionally be wrapped with another function, if you are using View Engine AOT.\nIn case you are using Ivy (or only JIT View Engine) the extra wrapper function is not required.\n\n**Declaring a reducer creator**\n\n```ts\nexport const reducer = createReducer(\ninitialState,\non(\nfeatureActions.actionOne,\nfeatureActions.actionTwo,\n(state, { updatedValue }) => ({ ...state, prop: updatedValue })\n),\non(featureActions.actionThree, () => initialState)\n);\n```\n\n**Declaring a reducer creator using a wrapper function (Only needed if using View Engine AOT)**\n\n```ts\nconst featureReducer = createReducer(\ninitialState,\non(\nfeatureActions.actionOne,\nfeatureActions.actionTwo,\n(state, { updatedValue }) => ({ ...state, prop: updatedValue })\n),\non(featureActions.actionThree, () => initialState)\n);\n\nexport function reducer(state: State | undefined, action: Action) {\nreturn featureReducer(state, action);\n}\n```\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store-devtools",
    "name": "StoreDevtoolsModule",
    "overloads": [
      {
        "file": "modules/store-devtools/src/instrument.ts#L51-L92",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "instrument",
              "info": {
                "file": "modules/store-devtools/src/instrument.ts#L53-L91",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "StoreDevtoolsOptions"
                    }
                  ]
                ],
                "signature": "static instrument(  options: StoreDevtoolsOptions = {} ): ModuleWithProviders<StoreDevtoolsModule>;"
              }
            }
          ]
        ],
        "signature": "class StoreDevtoolsModule {\n  static instrument(\n    options: StoreDevtoolsOptions = {}\n  ): ModuleWithProviders<StoreDevtoolsModule>;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store-devtools",
    "name": "LiftedState",
    "overloads": [
      {
        "file": "modules/store-devtools/src/reducer.ts#L39-L50",
        "signature": "interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: LiftedActions;\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: ComputedState[];\n  isLocked: boolean;\n  isPaused: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store-devtools",
    "name": "RECOMPUTE",
    "overloads": [
      {
        "file": "modules/store-devtools/src/reducer.ts#L22-L22",
        "signature": "const RECOMPUTE: '@ngrx/store-devtools/recompute';",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store-devtools",
    "name": "StoreDevtools",
    "overloads": [
      {
        "file": "modules/store-devtools/src/devtools.ts#L33-L186",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatch",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L127-L129",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "dispatch(action: Action);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L131-L133",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "next(action: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L135-L135",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(error: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L137-L137",
                "info": [],
                "signature": "complete();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "performAction",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L139-L141",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "action",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "performAction(action: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "refresh",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L143-L145",
                "info": [],
                "signature": "refresh();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L147-L149",
                "info": [],
                "signature": "reset();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "rollback",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L151-L153",
                "info": [],
                "signature": "rollback();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "commit",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L155-L157",
                "info": [],
                "signature": "commit();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "sweep",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L159-L161",
                "info": [],
                "signature": "sweep();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toggleAction",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L163-L165",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "toggleAction(id: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "jumpToAction",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L167-L169",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "actionId",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "jumpToAction(actionId: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "jumpToState",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L171-L173",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "jumpToState(index: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "importState",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L175-L177",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "nextLiftedState",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "importState(nextLiftedState: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lockChanges",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L179-L181",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "status",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "lockChanges(status: boolean);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pauseRecording",
              "info": {
                "file": "modules/store-devtools/src/devtools.ts#L183-L185",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "status",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "pauseRecording(status: boolean);"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "dispatcher",
              "type": "any",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "liftedState",
              "type": "Observable<LiftedState>",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "type": "Observable<any>",
              "description": ""
            }
          ]
        ],
        "signature": "class StoreDevtools implements Observer<any> {\n  public dispatcher: ActionsSubject;\n  public liftedState: Observable<LiftedState>;\n  public state: Observable<any>;\n\n  dispatch(action: Action);\n  next(action: any);\n  performAction(action: any);\n  refresh();\n  reset();\n  rollback();\n  commit();\n  sweep();\n  toggleAction(id: number);\n  jumpToAction(actionId: number);\n  jumpToState(index: number);\n  importState(nextLiftedState: any);\n  lockChanges(status: boolean);\n  pauseRecording(status: boolean);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "store-devtools",
    "name": "StoreDevtoolsConfig",
    "overloads": [
      {
        "file": "modules/store-devtools/src/config.ts#L27-L39",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "maxAge",
              "type": "number | false",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "monitor",
              "type": "any",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "actionSanitizer",
              "type": "ActionSanitizer",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stateSanitizer",
              "type": "StateSanitizer",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "type": "string",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "serialize",
              "type": "boolean | SerializationOptions",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "logOnly",
              "type": "boolean",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "features",
              "type": "DevToolsFeatureOptions",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "actionsBlocklist",
              "type": "string[]",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "actionsSafelist",
              "type": "string[]",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "predicate",
              "type": "Predicate",
              "description": ""
            }
          ]
        ],
        "signature": "class StoreDevtoolsConfig {\n  maxAge: number | false = false;\n  monitor?: ActionReducer<any, any>;\n  actionSanitizer?: ActionSanitizer;\n  stateSanitizer?: StateSanitizer;\n  name?: string;\n  serialize?: boolean | SerializationOptions;\n  logOnly?: boolean;\n  features?: DevToolsFeatureOptions;\n  actionsBlocklist?: string[];\n  actionsSafelist?: string[];\n  predicate?: Predicate;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "store-devtools",
    "name": "StoreDevtoolsOptions",
    "overloads": [
      {
        "file": "modules/store-devtools/src/config.ts#L48-L50",
        "signature": "export type StoreDevtoolsOptions =\n  | Partial<StoreDevtoolsConfig>\n  | (() => Partial<StoreDevtoolsConfig>);",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "store-devtools",
    "name": "DevToolsFeatureOptions",
    "overloads": [
      {
        "file": "modules/store-devtools/src/config.ts#L14-L25",
        "signature": "interface DevToolsFeatureOptions {\n  pause?: boolean;\n  lock?: boolean;\n  persist?: boolean;\n  export?: boolean;\n  import?: 'custom' | boolean;\n  jump?: boolean;\n  skip?: boolean;\n  reorder?: boolean;\n  dispatch?: boolean;\n  test?: boolean;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "store-devtools",
    "name": "INITIAL_OPTIONS",
    "overloads": [
      {
        "file": "modules/store-devtools/src/config.ts#L44-L46",
        "signature": "const INITIAL_OPTIONS: InjectionToken<StoreDevtoolsConfig>;",
        "info": []
      }
    ]
  }
]
